{"version":3,"file":"index-Bx5gDVp5.js","sources":["../../src/game/engine/InputManager.ts","../../src/game/engine/AudioManager.ts","../../src/game/entities/Player.ts","../../src/game/systems/SkillSystem.ts","../../src/game/systems/EquipmentSystem.ts","../../src/game/systems/AchievementSystem.ts","../../src/store/playerStore.ts","../../src/game/engine/SceneManager.ts","../../src/game/engine/GameEngine.ts","../../src/store/gameStore.ts","../../src/components/3d/SacredGeometry.tsx","../../src/components/game/VJCareerGame3D.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["export interface InputState {\n  keys: Set<string>;\n  mouse: {\n    x: number;\n    y: number;\n    buttons: Set<number>;\n    wheel: number;\n  };\n  touch: {\n    touches: Touch[];\n    isActive: boolean;\n  };\n}\n\nexport class InputManager {\n  private canvas: HTMLCanvasElement;\n  private state: InputState;\n  private previousState: InputState;\n  private callbacks: Map<string, Set<Function>> = new Map();\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n\n    this.state = {\n      keys: new Set(),\n      mouse: {\n        x: 0,\n        y: 0,\n        buttons: new Set(),\n        wheel: 0\n      },\n      touch: {\n        touches: [],\n        isActive: false\n      }\n    };\n\n    this.previousState = this.cloneState(this.state);\n    this.setupEventListeners();\n  }\n\n  private cloneState(state: InputState): InputState {\n    return {\n      keys: new Set(state.keys),\n      mouse: {\n        x: state.mouse.x,\n        y: state.mouse.y,\n        buttons: new Set(state.mouse.buttons),\n        wheel: state.mouse.wheel\n      },\n      touch: {\n        touches: [...state.touch.touches],\n        isActive: state.touch.isActive\n      }\n    };\n  }\n\n  private setupEventListeners(): void {\n    // Keyboard events\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('keyup', this.handleKeyUp.bind(this));\n\n    // Mouse events\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.canvas.addEventListener('wheel', this.handleWheel.bind(this));\n\n    // Touch events\n    this.canvas.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });\n    this.canvas.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });\n    this.canvas.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });\n\n    // Context menu prevention\n    this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());\n\n    // Focus management\n    this.canvas.tabIndex = 0; // Make canvas focusable\n  }\n\n  // Keyboard handlers\n  private handleKeyDown(event: KeyboardEvent): void {\n    this.state.keys.add(event.code);\n    this.triggerCallback('keydown', event);\n\n    // Prevent default for game keys to avoid browser shortcuts\n    const gameKeys = ['Space', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'KeyW', 'KeyA', 'KeyS', 'KeyD'];\n    if (gameKeys.includes(event.code)) {\n      event.preventDefault();\n    }\n  }\n\n  private handleKeyUp(event: KeyboardEvent): void {\n    this.state.keys.delete(event.code);\n    this.triggerCallback('keyup', event);\n  }\n\n  // Mouse handlers\n  private handleMouseDown(event: MouseEvent): void {\n    this.state.mouse.buttons.add(event.button);\n    this.updateMousePosition(event);\n    this.triggerCallback('mousedown', event);\n    this.canvas.focus(); // Focus canvas when clicked\n  }\n\n  private handleMouseUp(event: MouseEvent): void {\n    this.state.mouse.buttons.delete(event.button);\n    this.updateMousePosition(event);\n    this.triggerCallback('mouseup', event);\n  }\n\n  private handleMouseMove(event: MouseEvent): void {\n    this.updateMousePosition(event);\n    this.triggerCallback('mousemove', event);\n  }\n\n  private handleWheel(event: WheelEvent): void {\n    this.state.mouse.wheel = event.deltaY;\n    this.triggerCallback('wheel', event);\n    event.preventDefault();\n  }\n\n  private updateMousePosition(event: MouseEvent): void {\n    const rect = this.canvas.getBoundingClientRect();\n    this.state.mouse.x = event.clientX - rect.left;\n    this.state.mouse.y = event.clientY - rect.top;\n  }\n\n  // Touch handlers\n  private handleTouchStart(event: TouchEvent): void {\n    this.state.touch.isActive = true;\n    this.state.touch.touches = Array.from(event.touches);\n    this.triggerCallback('touchstart', event);\n    event.preventDefault();\n  }\n\n  private handleTouchEnd(event: TouchEvent): void {\n    this.state.touch.touches = Array.from(event.touches);\n    if (event.touches.length === 0) {\n      this.state.touch.isActive = false;\n    }\n    this.triggerCallback('touchend', event);\n    event.preventDefault();\n  }\n\n  private handleTouchMove(event: TouchEvent): void {\n    this.state.touch.touches = Array.from(event.touches);\n    this.triggerCallback('touchmove', event);\n    event.preventDefault();\n  }\n\n  // Public API\n  public isKeyPressed(key: string): boolean {\n    return this.state.keys.has(key);\n  }\n\n  public isKeyJustPressed(key: string): boolean {\n    return this.state.keys.has(key) && !this.previousState.keys.has(key);\n  }\n\n  public isKeyJustReleased(key: string): boolean {\n    return !this.state.keys.has(key) && this.previousState.keys.has(key);\n  }\n\n  public isMouseButtonPressed(button: number): boolean {\n    return this.state.mouse.buttons.has(button);\n  }\n\n  public isMouseButtonJustPressed(button: number): boolean {\n    return this.state.mouse.buttons.has(button) && !this.previousState.mouse.buttons.has(button);\n  }\n\n  public isMouseButtonJustReleased(button: number): boolean {\n    return !this.state.mouse.buttons.has(button) && this.previousState.mouse.buttons.has(button);\n  }\n\n  public getMousePosition(): { x: number; y: number } {\n    return { x: this.state.mouse.x, y: this.state.mouse.y };\n  }\n\n  public getMouseWheel(): number {\n    return this.state.mouse.wheel;\n  }\n\n  public getTouches(): Touch[] {\n    return [...this.state.touch.touches];\n  }\n\n  public isTouchActive(): boolean {\n    return this.state.touch.isActive;\n  }\n\n  // Event callbacks\n  public on(event: string, callback: Function): void {\n    if (!this.callbacks.has(event)) {\n      this.callbacks.set(event, new Set());\n    }\n    this.callbacks.get(event)!.add(callback);\n  }\n\n  public off(event: string, callback: Function): void {\n    const callbacks = this.callbacks.get(event);\n    if (callbacks) {\n      callbacks.delete(callback);\n    }\n  }\n\n  private triggerCallback(event: string, data: any): void {\n    const callbacks = this.callbacks.get(event);\n    if (callbacks) {\n      callbacks.forEach(callback => callback(data));\n    }\n  }\n\n  // Update method called each frame\n  public update(): void {\n    // Store previous state for \"just pressed/released\" checks\n    this.previousState = this.cloneState(this.state);\n\n    // Reset frame-specific values\n    this.state.mouse.wheel = 0;\n  }\n\n  // Input schemes for different contexts\n  public getMovementInput(): { x: number; y: number } {\n    let x = 0;\n    let y = 0;\n\n    // WASD movement\n    if (this.isKeyPressed('KeyW') || this.isKeyPressed('ArrowUp')) y -= 1;\n    if (this.isKeyPressed('KeyS') || this.isKeyPressed('ArrowDown')) y += 1;\n    if (this.isKeyPressed('KeyA') || this.isKeyPressed('ArrowLeft')) x -= 1;\n    if (this.isKeyPressed('KeyD') || this.isKeyPressed('ArrowRight')) x += 1;\n\n    // Normalize diagonal movement\n    if (x !== 0 && y !== 0) {\n      const length = Math.sqrt(x * x + y * y);\n      x /= length;\n      y /= length;\n    }\n\n    return { x, y };\n  }\n\n  public getActionInputs(): { [key: string]: boolean } {\n    return {\n      interact: this.isKeyJustPressed('KeyE') || this.isKeyJustPressed('Space'),\n      menu: this.isKeyJustPressed('Escape'),\n      inventory: this.isKeyJustPressed('KeyI'),\n      skills: this.isKeyJustPressed('KeyK'),\n      confirm: this.isKeyJustPressed('Enter'),\n      cancel: this.isKeyJustPressed('Escape')\n    };\n  }\n\n  // Cleanup\n  public destroy(): void {\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    window.removeEventListener('keyup', this.handleKeyUp.bind(this));\n\n    this.canvas.removeEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.canvas.removeEventListener('mouseup', this.handleMouseUp.bind(this));\n    this.canvas.removeEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.canvas.removeEventListener('wheel', this.handleWheel.bind(this));\n\n    this.canvas.removeEventListener('touchstart', this.handleTouchStart.bind(this));\n    this.canvas.removeEventListener('touchend', this.handleTouchEnd.bind(this));\n    this.canvas.removeEventListener('touchmove', this.handleTouchMove.bind(this));\n\n    this.callbacks.clear();\n  }\n}","export interface AudioSettings {\n  masterVolume: number;\n  musicVolume: number;\n  sfxVolume: number;\n  muted: boolean;\n}\n\nexport interface AudioSource {\n  audio: HTMLAudioElement;\n  volume: number;\n  loop: boolean;\n  category: 'music' | 'sfx';\n  fadeIn?: boolean;\n  fadeOut?: boolean;\n  fadeDuration?: number;\n  currentFade?: number;\n}\n\nexport class AudioManager {\n  private audioSources: Map<string, AudioSource> = new Map();\n  private settings: AudioSettings;\n  private audioContext: AudioContext | null = null;\n  private gainNodes: Map<string, GainNode> = new Map();\n\n  constructor() {\n    this.settings = {\n      masterVolume: 0.7,\n      musicVolume: 0.5,\n      sfxVolume: 0.8,\n      muted: false\n    };\n\n    this.loadSettingsFromStorage();\n    this.initializeAudioContext();\n  }\n\n  private initializeAudioContext(): void {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n\n      // Create gain nodes for different categories\n      const masterGain = this.audioContext.createGain();\n      const musicGain = this.audioContext.createGain();\n      const sfxGain = this.audioContext.createGain();\n\n      masterGain.connect(this.audioContext.destination);\n      musicGain.connect(masterGain);\n      sfxGain.connect(masterGain);\n\n      this.gainNodes.set('master', masterGain);\n      this.gainNodes.set('music', musicGain);\n      this.gainNodes.set('sfx', sfxGain);\n\n      this.updateGainNodes();\n    } catch (error) {\n      console.warn('Web Audio API not supported:', error);\n    }\n  }\n\n  private updateGainNodes(): void {\n    if (!this.audioContext) return;\n\n    const masterGain = this.gainNodes.get('master');\n    const musicGain = this.gainNodes.get('music');\n    const sfxGain = this.gainNodes.get('sfx');\n\n    if (masterGain) {\n      masterGain.gain.value = this.settings.muted ? 0 : this.settings.masterVolume;\n    }\n    if (musicGain) {\n      musicGain.gain.value = this.settings.musicVolume;\n    }\n    if (sfxGain) {\n      sfxGain.gain.value = this.settings.sfxVolume;\n    }\n  }\n\n  // Load audio file\n  public async loadAudio(key: string, src: string, category: 'music' | 'sfx' = 'sfx', loop: boolean = false): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const audio = new Audio();\n\n      audio.addEventListener('canplaythrough', () => {\n        const source: AudioSource = {\n          audio,\n          volume: 1.0,\n          loop,\n          category\n        };\n\n        this.audioSources.set(key, source);\n        resolve();\n      });\n\n      audio.addEventListener('error', (error) => {\n        console.error(`Failed to load audio: ${key}`, error);\n        reject(error);\n      });\n\n      audio.src = src;\n      audio.preload = 'auto';\n    });\n  }\n\n  // Play audio\n  public play(key: string, volume: number = 1.0, fadeIn: boolean = false, fadeDuration: number = 1.0): void {\n    const source = this.audioSources.get(key);\n    if (!source) {\n      console.warn(`Audio not found: ${key}`);\n      return;\n    }\n\n    // Stop current playback if playing\n    source.audio.pause();\n    source.audio.currentTime = 0;\n\n    // Set volume\n    source.volume = volume;\n    source.audio.loop = source.loop;\n\n    // Apply fade in\n    if (fadeIn) {\n      source.fadeIn = true;\n      source.fadeDuration = fadeDuration;\n      source.currentFade = 0;\n      source.audio.volume = 0;\n    } else {\n      source.audio.volume = this.calculateEffectiveVolume(source);\n    }\n\n    // Play audio\n    const playPromise = source.audio.play();\n    if (playPromise !== undefined) {\n      playPromise.catch(error => {\n        console.warn('Audio play failed:', error);\n      });\n    }\n  }\n\n  // Stop audio\n  public stop(key: string, fadeOut: boolean = false, fadeDuration: number = 1.0): void {\n    const source = this.audioSources.get(key);\n    if (!source) return;\n\n    if (fadeOut) {\n      source.fadeOut = true;\n      source.fadeDuration = fadeDuration;\n      source.currentFade = 0;\n    } else {\n      source.audio.pause();\n      source.audio.currentTime = 0;\n    }\n  }\n\n  // Pause audio\n  public pause(key: string): void {\n    const source = this.audioSources.get(key);\n    if (source) {\n      source.audio.pause();\n    }\n  }\n\n  // Resume audio\n  public resume(key: string): void {\n    const source = this.audioSources.get(key);\n    if (source && source.audio.paused) {\n      const playPromise = source.audio.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          console.warn('Audio resume failed:', error);\n        });\n      }\n    }\n  }\n\n  // Check if audio is playing\n  public isPlaying(key: string): boolean {\n    const source = this.audioSources.get(key);\n    return source ? !source.audio.paused && source.audio.currentTime > 0 : false;\n  }\n\n  // Volume controls\n  public setVolume(category: keyof AudioSettings, volume: number): void {\n    this.settings[category] = Math.max(0, Math.min(1, volume));\n    this.updateGainNodes();\n    this.updateAllAudioVolumes();\n    this.saveSettingsToStorage();\n  }\n\n  public getVolume(category: keyof AudioSettings): number {\n    return this.settings[category];\n  }\n\n  public toggleMute(): void {\n    this.settings.muted = !this.settings.muted;\n    this.updateGainNodes();\n    this.updateAllAudioVolumes();\n    this.saveSettingsToStorage();\n  }\n\n  public isMuted(): boolean {\n    return this.settings.muted;\n  }\n\n  private calculateEffectiveVolume(source: AudioSource): number {\n    if (this.settings.muted) return 0;\n\n    let categoryVolume = 1;\n    switch (source.category) {\n      case 'music':\n        categoryVolume = this.settings.musicVolume;\n        break;\n      case 'sfx':\n        categoryVolume = this.settings.sfxVolume;\n        break;\n    }\n\n    return source.volume * categoryVolume * this.settings.masterVolume;\n  }\n\n  private updateAllAudioVolumes(): void {\n    this.audioSources.forEach((source) => {\n      if (!source.fadeIn && !source.fadeOut) {\n        source.audio.volume = this.calculateEffectiveVolume(source);\n      }\n    });\n  }\n\n  // Update method called each frame\n  public update(): void {\n    const deltaTime = 1 / 60; // Approximate frame time\n\n    this.audioSources.forEach((source, key) => {\n      // Handle fade in\n      if (source.fadeIn && source.currentFade !== undefined && source.fadeDuration) {\n        source.currentFade += deltaTime;\n        const progress = Math.min(source.currentFade / source.fadeDuration, 1);\n        source.audio.volume = this.calculateEffectiveVolume(source) * progress;\n\n        if (progress >= 1) {\n          source.fadeIn = false;\n          source.currentFade = undefined;\n        }\n      }\n\n      // Handle fade out\n      if (source.fadeOut && source.currentFade !== undefined && source.fadeDuration) {\n        source.currentFade += deltaTime;\n        const progress = Math.min(source.currentFade / source.fadeDuration, 1);\n        source.audio.volume = this.calculateEffectiveVolume(source) * (1 - progress);\n\n        if (progress >= 1) {\n          source.audio.pause();\n          source.audio.currentTime = 0;\n          source.fadeOut = false;\n          source.currentFade = undefined;\n        }\n      }\n    });\n  }\n\n  // Preload common game sounds\n  public async preloadGameAudio(): Promise<void> {\n    const audioFiles = [\n      { key: 'click', src: '/assets/audio/ui/click.mp3', category: 'sfx' as const },\n      { key: 'success', src: '/assets/audio/ui/success.mp3', category: 'sfx' as const },\n      { key: 'error', src: '/assets/audio/ui/error.mp3', category: 'sfx' as const },\n      { key: 'levelUp', src: '/assets/audio/game/level-up.mp3', category: 'sfx' as const },\n      { key: 'achievement', src: '/assets/audio/game/achievement.mp3', category: 'sfx' as const },\n      { key: 'backgroundMusic', src: '/assets/audio/music/background.mp3', category: 'music' as const, loop: true },\n      { key: 'menuMusic', src: '/assets/audio/music/menu.mp3', category: 'music' as const, loop: true }\n    ];\n\n    const loadPromises = audioFiles.map(({ key, src, category, loop }) =>\n      this.loadAudio(key, src, category, loop).catch(error => {\n        console.warn(`Failed to preload audio: ${key}`, error);\n      })\n    );\n\n    await Promise.all(loadPromises);\n  }\n\n  // Quick play methods for common sounds\n  public playClick(): void {\n    this.play('click', 0.5);\n  }\n\n  public playSuccess(): void {\n    this.play('success', 0.7);\n  }\n\n  public playError(): void {\n    this.play('error', 0.6);\n  }\n\n  public playLevelUp(): void {\n    this.play('levelUp', 0.8);\n  }\n\n  public playAchievement(): void {\n    this.play('achievement', 0.9);\n  }\n\n  public playBackgroundMusic(): void {\n    this.play('backgroundMusic', 0.3, true, 2.0);\n  }\n\n  public playMenuMusic(): void {\n    this.play('menuMusic', 0.4, true, 1.5);\n  }\n\n  // Settings persistence\n  private loadSettingsFromStorage(): void {\n    const stored = localStorage.getItem('audioSettings');\n    if (stored) {\n      try {\n        const settings = JSON.parse(stored);\n        this.settings = { ...this.settings, ...settings };\n      } catch (error) {\n        console.warn('Failed to load audio settings from storage:', error);\n      }\n    }\n  }\n\n  private saveSettingsToStorage(): void {\n    try {\n      localStorage.setItem('audioSettings', JSON.stringify(this.settings));\n    } catch (error) {\n      console.warn('Failed to save audio settings to storage:', error);\n    }\n  }\n\n  // Cleanup\n  public destroy(): void {\n    this.audioSources.forEach((source) => {\n      source.audio.pause();\n      source.audio.src = '';\n    });\n\n    this.audioSources.clear();\n\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n\n    this.gainNodes.clear();\n  }\n}","export interface PlayerStats {\n  level: number;\n  experience: number;\n  experienceToNext: number;\n  reputation: number;\n  energy: number;\n  maxEnergy: number;\n  money: number;\n}\n\nexport interface PlayerPosition {\n  x: number;\n  y: number;\n  scene: string;\n}\n\nexport interface PlayerSkills {\n  technicalMapping: number;\n  artisticVision: number;\n  equipmentMastery: number;\n  socialMedia: number;\n  collaboration: number;\n}\n\nexport interface PlayerEquipment {\n  projector: string | null;\n  computer: string | null;\n  controller: string | null;\n  software: string[];\n  accessories: string[];\n}\n\nexport class Player {\n  private stats: PlayerStats;\n  private skills: PlayerSkills;\n  private equipment: PlayerEquipment;\n  private position: PlayerPosition;\n  private inventory: Map<string, number> = new Map();\n  private achievements: Set<string> = new Set();\n  private unlockedContent: Set<string> = new Set();\n\n  constructor() {\n    // Initialize starting stats\n    this.stats = {\n      level: 1,\n      experience: 0,\n      experienceToNext: 100,\n      reputation: 0,\n      energy: 100,\n      maxEnergy: 100,\n      money: 0\n    };\n\n    // Initialize starting skills\n    this.skills = {\n      technicalMapping: 1,\n      artisticVision: 1,\n      equipmentMastery: 1,\n      socialMedia: 1,\n      collaboration: 1\n    };\n\n    // Initialize starting equipment\n    this.equipment = {\n      projector: null,\n      computer: 'basic-laptop',\n      controller: null,\n      software: ['basic-vj-software'],\n      accessories: []\n    };\n\n    // Initialize starting position\n    this.position = {\n      x: 0,\n      y: 0,\n      scene: 'home'\n    };\n  }\n\n  // Stats management\n  public getStats(): PlayerStats {\n    return { ...this.stats };\n  }\n\n  public addExperience(amount: number): boolean {\n    this.stats.experience += amount;\n\n    // Check for level up\n    while (this.stats.experience >= this.stats.experienceToNext) {\n      this.levelUp();\n    }\n\n    return true;\n  }\n\n  private levelUp(): void {\n    this.stats.experience -= this.stats.experienceToNext;\n    this.stats.level++;\n\n    // Increase max energy\n    this.stats.maxEnergy += 10;\n    this.stats.energy = this.stats.maxEnergy; // Restore energy on level up\n\n    // Calculate experience needed for next level (exponential growth)\n    this.stats.experienceToNext = Math.floor(100 * Math.pow(1.2, this.stats.level - 1));\n\n    // Award skill points (could be used in a skill point system)\n    this.addReputation(10);\n\n    // Trigger level up effects\n    this.onLevelUp();\n  }\n\n  private onLevelUp(): void {\n    // Override in subclasses or use event system\n    console.log(`Player reached level ${this.stats.level}!`);\n  }\n\n  public addReputation(amount: number): void {\n    this.stats.reputation = Math.max(0, this.stats.reputation + amount);\n  }\n\n  public addMoney(amount: number): void {\n    this.stats.money = Math.max(0, this.stats.money + amount);\n  }\n\n  public spendMoney(amount: number): boolean {\n    if (this.stats.money >= amount) {\n      this.stats.money -= amount;\n      return true;\n    }\n    return false;\n  }\n\n  public consumeEnergy(amount: number): boolean {\n    if (this.stats.energy >= amount) {\n      this.stats.energy -= amount;\n      return true;\n    }\n    return false;\n  }\n\n  public restoreEnergy(amount: number): void {\n    this.stats.energy = Math.min(this.stats.maxEnergy, this.stats.energy + amount);\n  }\n\n  // Skills management\n  public getSkills(): PlayerSkills {\n    return { ...this.skills };\n  }\n\n  public getSkillLevel(skill: keyof PlayerSkills): number {\n    return this.skills[skill];\n  }\n\n  public upgradeSkill(skill: keyof PlayerSkills, cost: number = 0): boolean {\n    // Check if player can afford the upgrade (could use experience, reputation, or skill points)\n    if (cost > 0 && this.stats.reputation < cost) {\n      return false;\n    }\n\n    // Maximum skill level check\n    if (this.skills[skill] >= 10) {\n      return false;\n    }\n\n    // Apply upgrade\n    this.skills[skill]++;\n    if (cost > 0) {\n      this.stats.reputation -= cost;\n    }\n\n    this.onSkillUpgrade(skill);\n    return true;\n  }\n\n  private onSkillUpgrade(skill: keyof PlayerSkills): void {\n    console.log(`${skill} upgraded to level ${this.skills[skill]}!`);\n\n    // Unlock content based on skill levels\n    this.checkSkillUnlocks(skill);\n  }\n\n  private checkSkillUnlocks(skill: keyof PlayerSkills): void {\n    const level = this.skills[skill];\n\n    switch (skill) {\n      case 'technicalMapping':\n        if (level >= 3) this.unlockedContent.add('advanced-mapping-tools');\n        if (level >= 5) this.unlockedContent.add('shader-programming');\n        if (level >= 8) this.unlockedContent.add('custom-effects');\n        break;\n\n      case 'artisticVision':\n        if (level >= 3) this.unlockedContent.add('color-theory-lessons');\n        if (level >= 5) this.unlockedContent.add('advanced-compositions');\n        if (level >= 8) this.unlockedContent.add('signature-style');\n        break;\n\n      case 'equipmentMastery':\n        if (level >= 3) this.unlockedContent.add('projector-shop');\n        if (level >= 5) this.unlockedContent.add('high-end-equipment');\n        if (level >= 8) this.unlockedContent.add('custom-rigs');\n        break;\n\n      case 'socialMedia':\n        if (level >= 3) this.unlockedContent.add('streaming-platform');\n        if (level >= 5) this.unlockedContent.add('brand-partnerships');\n        if (level >= 8) this.unlockedContent.add('viral-marketing');\n        break;\n\n      case 'collaboration':\n        if (level >= 3) this.unlockedContent.add('team-projects');\n        if (level >= 5) this.unlockedContent.add('festival-invites');\n        if (level >= 8) this.unlockedContent.add('mentorship');\n        break;\n    }\n  }\n\n  // Equipment management\n  public getEquipment(): PlayerEquipment {\n    return { ...this.equipment };\n  }\n\n  public equipItem(slot: keyof Omit<PlayerEquipment, 'software' | 'accessories'>, itemId: string): boolean {\n    if (this.hasInInventory(itemId)) {\n      // Unequip current item if any\n      const currentItem = this.equipment[slot];\n      if (currentItem) {\n        this.addToInventory(currentItem, 1);\n      }\n\n      // Equip new item\n      this.equipment[slot] = itemId;\n      this.removeFromInventory(itemId, 1);\n\n      this.onEquipmentChange();\n      return true;\n    }\n    return false;\n  }\n\n  public unequipItem(slot: keyof Omit<PlayerEquipment, 'software' | 'accessories'>): boolean {\n    const currentItem = this.equipment[slot];\n    if (currentItem) {\n      this.equipment[slot] = null;\n      this.addToInventory(currentItem, 1);\n      this.onEquipmentChange();\n      return true;\n    }\n    return false;\n  }\n\n  public addSoftware(softwareId: string): void {\n    if (!this.equipment.software.includes(softwareId)) {\n      this.equipment.software.push(softwareId);\n      this.onEquipmentChange();\n    }\n  }\n\n  public addAccessory(accessoryId: string): void {\n    if (!this.equipment.accessories.includes(accessoryId)) {\n      this.equipment.accessories.push(accessoryId);\n      this.onEquipmentChange();\n    }\n  }\n\n  private onEquipmentChange(): void {\n    // Recalculate bonuses, update appearance, etc.\n    console.log('Equipment changed');\n  }\n\n  // Inventory management\n  public getInventory(): Map<string, number> {\n    return new Map(this.inventory);\n  }\n\n  public addToInventory(itemId: string, quantity: number = 1): void {\n    const current = this.inventory.get(itemId) || 0;\n    this.inventory.set(itemId, current + quantity);\n  }\n\n  public removeFromInventory(itemId: string, quantity: number = 1): boolean {\n    const current = this.inventory.get(itemId) || 0;\n    if (current >= quantity) {\n      if (current === quantity) {\n        this.inventory.delete(itemId);\n      } else {\n        this.inventory.set(itemId, current - quantity);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  public hasInInventory(itemId: string, quantity: number = 1): boolean {\n    const current = this.inventory.get(itemId) || 0;\n    return current >= quantity;\n  }\n\n  public getInventoryCount(itemId: string): number {\n    return this.inventory.get(itemId) || 0;\n  }\n\n  // Position management\n  public getPosition(): PlayerPosition {\n    return { ...this.position };\n  }\n\n  public setPosition(x: number, y: number, scene?: string): void {\n    this.position.x = x;\n    this.position.y = y;\n    if (scene) {\n      this.position.scene = scene;\n    }\n  }\n\n  public moveBy(dx: number, dy: number): void {\n    this.position.x += dx;\n    this.position.y += dy;\n  }\n\n  // Achievement system\n  public getAchievements(): Set<string> {\n    return new Set(this.achievements);\n  }\n\n  public unlockAchievement(achievementId: string): boolean {\n    if (!this.achievements.has(achievementId)) {\n      this.achievements.add(achievementId);\n      this.onAchievementUnlocked(achievementId);\n      return true;\n    }\n    return false;\n  }\n\n  public hasAchievement(achievementId: string): boolean {\n    return this.achievements.has(achievementId);\n  }\n\n  private onAchievementUnlocked(achievementId: string): void {\n    console.log(`Achievement unlocked: ${achievementId}`);\n    this.addExperience(50); // Bonus experience for achievements\n  }\n\n  // Content unlocking\n  public getUnlockedContent(): Set<string> {\n    return new Set(this.unlockedContent);\n  }\n\n  public hasUnlockedContent(contentId: string): boolean {\n    return this.unlockedContent.has(contentId);\n  }\n\n  public unlockContent(contentId: string): void {\n    this.unlockedContent.add(contentId);\n  }\n\n  // Calculate effective stats with equipment bonuses\n  public getEffectiveStats(): PlayerStats & { bonuses: any } {\n    const baseStats = this.getStats();\n    const bonuses = this.calculateEquipmentBonuses();\n\n    return {\n      ...baseStats,\n      bonuses,\n      // Apply bonuses to relevant stats\n      maxEnergy: baseStats.maxEnergy + (bonuses.energy || 0)\n    };\n  }\n\n  private calculateEquipmentBonuses(): any {\n    const bonuses: any = {};\n\n    // Calculate bonuses from equipped items\n    // This would be expanded with actual equipment data\n    if (this.equipment.projector) {\n      bonuses.artisticVision = 1;\n    }\n\n    if (this.equipment.computer === 'high-end-workstation') {\n      bonuses.technicalMapping = 2;\n      bonuses.energy = 20;\n    }\n\n    return bonuses;\n  }\n\n  // Serialization for save/load\n  public serialize(): string {\n    return JSON.stringify({\n      stats: this.stats,\n      skills: this.skills,\n      equipment: this.equipment,\n      position: this.position,\n      inventory: Array.from(this.inventory.entries()),\n      achievements: Array.from(this.achievements),\n      unlockedContent: Array.from(this.unlockedContent)\n    });\n  }\n\n  public deserialize(data: string): void {\n    try {\n      const parsed = JSON.parse(data);\n\n      this.stats = parsed.stats || this.stats;\n      this.skills = parsed.skills || this.skills;\n      this.equipment = parsed.equipment || this.equipment;\n      this.position = parsed.position || this.position;\n      this.inventory = new Map(parsed.inventory || []);\n      this.achievements = new Set(parsed.achievements || []);\n      this.unlockedContent = new Set(parsed.unlockedContent || []);\n    } catch (error) {\n      console.error('Failed to deserialize player data:', error);\n    }\n  }\n}","import { Player, PlayerSkills } from '../entities/Player';\n\nexport interface SkillDefinition {\n  id: keyof PlayerSkills;\n  name: string;\n  description: string;\n  icon: string;\n  maxLevel: number;\n  baseCost: number;\n  costMultiplier: number;\n  prerequisites?: {\n    skill: keyof PlayerSkills;\n    level: number;\n  }[];\n  unlocks: {\n    level: number;\n    content: string[];\n    description: string;\n  }[];\n}\n\nexport interface SkillTreeNode {\n  skill: keyof PlayerSkills;\n  position: { x: number; y: number };\n  connections: (keyof PlayerSkills)[];\n}\n\nexport class SkillSystem {\n  private static instance: SkillSystem;\n  private skillDefinitions: Map<keyof PlayerSkills, SkillDefinition> = new Map();\n  private skillTree: SkillTreeNode[] = [];\n\n  private constructor() {\n    this.initializeSkillDefinitions();\n    this.initializeSkillTree();\n  }\n\n  public static getInstance(): SkillSystem {\n    if (!SkillSystem.instance) {\n      SkillSystem.instance = new SkillSystem();\n    }\n    return SkillSystem.instance;\n  }\n\n  private initializeSkillDefinitions(): void {\n    const skills: SkillDefinition[] = [\n      {\n        id: 'technicalMapping',\n        name: 'Technical Mapping',\n        description: 'Master the technical aspects of VJ mapping and projection',\n        icon: '🔧',\n        maxLevel: 10,\n        baseCost: 20,\n        costMultiplier: 1.5,\n        unlocks: [\n          {\n            level: 2,\n            content: ['basic-mapping-tutorial'],\n            description: 'Unlock basic mapping tutorial'\n          },\n          {\n            level: 3,\n            content: ['advanced-mapping-tools'],\n            description: 'Access to advanced mapping software'\n          },\n          {\n            level: 5,\n            content: ['shader-programming', 'custom-effects'],\n            description: 'Learn shader programming and create custom effects'\n          },\n          {\n            level: 7,\n            content: ['realtime-mapping'],\n            description: 'Master real-time mapping techniques'\n          },\n          {\n            level: 10,\n            content: ['mapping-master-title'],\n            description: 'Become a recognized mapping master'\n          }\n        ]\n      },\n      {\n        id: 'artisticVision',\n        name: 'Artistic Vision',\n        description: 'Develop your creative eye and artistic sensibility',\n        icon: '🎨',\n        maxLevel: 10,\n        baseCost: 15,\n        costMultiplier: 1.4,\n        unlocks: [\n          {\n            level: 2,\n            content: ['color-theory-basics'],\n            description: 'Learn color theory fundamentals'\n          },\n          {\n            level: 3,\n            content: ['composition-techniques'],\n            description: 'Advanced composition techniques'\n          },\n          {\n            level: 5,\n            content: ['visual-storytelling', 'mood-creation'],\n            description: 'Master visual storytelling and mood creation'\n          },\n          {\n            level: 7,\n            content: ['signature-style'],\n            description: 'Develop your unique artistic signature'\n          },\n          {\n            level: 10,\n            content: ['artistic-recognition'],\n            description: 'Gain recognition as a visual artist'\n          }\n        ]\n      },\n      {\n        id: 'equipmentMastery',\n        name: 'Equipment Mastery',\n        description: 'Learn to use and optimize VJ equipment',\n        icon: '📹',\n        maxLevel: 10,\n        baseCost: 25,\n        costMultiplier: 1.6,\n        unlocks: [\n          {\n            level: 2,\n            content: ['projector-basics'],\n            description: 'Understanding projector fundamentals'\n          },\n          {\n            level: 3,\n            content: ['equipment-shop-access'],\n            description: 'Access to equipment marketplace'\n          },\n          {\n            level: 5,\n            content: ['high-end-equipment', 'equipment-modding'],\n            description: 'Unlock high-end equipment and modification options'\n          },\n          {\n            level: 7,\n            content: ['custom-rigs', 'multi-projector-setups'],\n            description: 'Build custom rigs and multi-projector setups'\n          },\n          {\n            level: 10,\n            content: ['equipment-expert-title'],\n            description: 'Become a recognized equipment expert'\n          }\n        ]\n      },\n      {\n        id: 'socialMedia',\n        name: 'Social Media',\n        description: 'Build your online presence and audience',\n        icon: '📱',\n        maxLevel: 10,\n        baseCost: 10,\n        costMultiplier: 1.3,\n        prerequisites: [\n          { skill: 'artisticVision', level: 2 }\n        ],\n        unlocks: [\n          {\n            level: 2,\n            content: ['social-media-tutorial'],\n            description: 'Learn social media best practices'\n          },\n          {\n            level: 3,\n            content: ['streaming-platform'],\n            description: 'Access to live streaming features'\n          },\n          {\n            level: 5,\n            content: ['content-scheduling', 'audience-analytics'],\n            description: 'Advanced content management and analytics'\n          },\n          {\n            level: 7,\n            content: ['brand-partnerships'],\n            description: 'Unlock brand partnership opportunities'\n          },\n          {\n            level: 10,\n            content: ['influencer-status'],\n            description: 'Achieve influencer status'\n          }\n        ]\n      },\n      {\n        id: 'collaboration',\n        name: 'Collaboration',\n        description: 'Work effectively with other artists and professionals',\n        icon: '🤝',\n        maxLevel: 10,\n        baseCost: 18,\n        costMultiplier: 1.4,\n        prerequisites: [\n          { skill: 'socialMedia', level: 2 }\n        ],\n        unlocks: [\n          {\n            level: 2,\n            content: ['networking-basics'],\n            description: 'Learn networking fundamentals'\n          },\n          {\n            level: 3,\n            content: ['team-projects'],\n            description: 'Participate in collaborative projects'\n          },\n          {\n            level: 5,\n            content: ['festival-connections', 'artist-collectives'],\n            description: 'Connect with festivals and artist collectives'\n          },\n          {\n            level: 7,\n            content: ['mentorship-program'],\n            description: 'Join mentorship programs'\n          },\n          {\n            level: 10,\n            content: ['community-leader-title'],\n            description: 'Become a recognized community leader'\n          }\n        ]\n      }\n    ];\n\n    skills.forEach(skill => {\n      this.skillDefinitions.set(skill.id, skill);\n    });\n  }\n\n  private initializeSkillTree(): void {\n    this.skillTree = [\n      {\n        skill: 'technicalMapping',\n        position: { x: 0, y: 0 },\n        connections: ['artisticVision', 'equipmentMastery']\n      },\n      {\n        skill: 'artisticVision',\n        position: { x: -150, y: 100 },\n        connections: ['technicalMapping', 'socialMedia']\n      },\n      {\n        skill: 'equipmentMastery',\n        position: { x: 150, y: 100 },\n        connections: ['technicalMapping']\n      },\n      {\n        skill: 'socialMedia',\n        position: { x: -150, y: 200 },\n        connections: ['artisticVision', 'collaboration']\n      },\n      {\n        skill: 'collaboration',\n        position: { x: 0, y: 300 },\n        connections: ['socialMedia']\n      }\n    ];\n  }\n\n  // Skill information\n  public getSkillDefinition(skill: keyof PlayerSkills): SkillDefinition | undefined {\n    return this.skillDefinitions.get(skill);\n  }\n\n  public getAllSkillDefinitions(): SkillDefinition[] {\n    return Array.from(this.skillDefinitions.values());\n  }\n\n  public getSkillTree(): SkillTreeNode[] {\n    return [...this.skillTree];\n  }\n\n  // Skill upgrade logic\n  public canUpgradeSkill(player: Player, skill: keyof PlayerSkills): { canUpgrade: boolean; reason?: string } {\n    const definition = this.skillDefinitions.get(skill);\n    if (!definition) {\n      return { canUpgrade: false, reason: 'Skill not found' };\n    }\n\n    const currentLevel = player.getSkillLevel(skill);\n\n    // Check max level\n    if (currentLevel >= definition.maxLevel) {\n      return { canUpgrade: false, reason: 'Maximum level reached' };\n    }\n\n    // Check prerequisites\n    if (definition.prerequisites) {\n      for (const prereq of definition.prerequisites) {\n        const prereqLevel = player.getSkillLevel(prereq.skill);\n        if (prereqLevel < prereq.level) {\n          const prereqName = this.skillDefinitions.get(prereq.skill)?.name || prereq.skill;\n          return {\n            canUpgrade: false,\n            reason: `Requires ${prereqName} level ${prereq.level}`\n          };\n        }\n      }\n    }\n\n    // Check cost\n    const cost = this.getUpgradeCost(skill, currentLevel);\n    const playerStats = player.getStats();\n    if (playerStats.reputation < cost) {\n      return { canUpgrade: false, reason: `Requires ${cost} reputation` };\n    }\n\n    return { canUpgrade: true };\n  }\n\n  public getUpgradeCost(skill: keyof PlayerSkills, currentLevel: number): number {\n    const definition = this.skillDefinitions.get(skill);\n    if (!definition) return 0;\n\n    return Math.floor(definition.baseCost * Math.pow(definition.costMultiplier, currentLevel));\n  }\n\n  public upgradeSkill(player: Player, skill: keyof PlayerSkills): boolean {\n    const canUpgrade = this.canUpgradeSkill(player, skill);\n    if (!canUpgrade.canUpgrade) {\n      return false;\n    }\n\n    const currentLevel = player.getSkillLevel(skill);\n    const cost = this.getUpgradeCost(skill, currentLevel);\n\n    if (player.upgradeSkill(skill, cost)) {\n      this.onSkillUpgraded(player, skill, currentLevel + 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  private onSkillUpgraded(player: Player, skill: keyof PlayerSkills, newLevel: number): void {\n    const definition = this.skillDefinitions.get(skill);\n    if (!definition) return;\n\n    // Check for unlocks at this level\n    const unlock = definition.unlocks.find(u => u.level === newLevel);\n    if (unlock) {\n      unlock.content.forEach(contentId => {\n        player.unlockContent(contentId);\n      });\n\n      // Trigger unlock notification\n      this.triggerUnlockNotification(definition.name, newLevel, unlock.description);\n    }\n\n    // Award experience for skill upgrade\n    player.addExperience(newLevel * 10);\n  }\n\n  private triggerUnlockNotification(skillName: string, level: number, description: string): void {\n    // This would trigger a UI notification\n    console.log(`${skillName} Level ${level}: ${description}`);\n  }\n\n  // Skill recommendations\n  public getRecommendedSkills(player: Player): (keyof PlayerSkills)[] {\n    const skills = player.getSkills();\n    const recommendations: (keyof PlayerSkills)[] = [];\n\n    // Find skills that can be upgraded and are balanced\n    const averageLevel = Object.values(skills).reduce((sum, level) => sum + level, 0) / Object.keys(skills).length;\n\n    Object.entries(skills).forEach(([skill, level]) => {\n      const skillKey = skill as keyof PlayerSkills;\n      const canUpgrade = this.canUpgradeSkill(player, skillKey);\n\n      if (canUpgrade.canUpgrade && level <= averageLevel + 1) {\n        recommendations.push(skillKey);\n      }\n    });\n\n    return recommendations;\n  }\n\n  // Skill synergies\n  public getSkillSynergies(skills: PlayerSkills): { [key: string]: number } {\n    const synergies: { [key: string]: number } = {};\n\n    // Technical + Artistic synergy\n    const techArtSynergy = Math.min(skills.technicalMapping, skills.artisticVision);\n    if (techArtSynergy >= 3) {\n      synergies['Creative Technician'] = techArtSynergy;\n    }\n\n    // Equipment + Technical synergy\n    const equipTechSynergy = Math.min(skills.equipmentMastery, skills.technicalMapping);\n    if (equipTechSynergy >= 3) {\n      synergies['Technical Expert'] = equipTechSynergy;\n    }\n\n    // Social + Collaboration synergy\n    const socialCollabSynergy = Math.min(skills.socialMedia, skills.collaboration);\n    if (socialCollabSynergy >= 3) {\n      synergies['Community Builder'] = socialCollabSynergy;\n    }\n\n    // All-rounder bonus\n    const minSkill = Math.min(...Object.values(skills));\n    if (minSkill >= 5) {\n      synergies['Jack of All Trades'] = minSkill;\n    }\n\n    // Master specialist bonus\n    const maxSkill = Math.max(...Object.values(skills));\n    if (maxSkill >= 8) {\n      synergies['Master Specialist'] = maxSkill;\n    }\n\n    return synergies;\n  }\n\n  // Progress tracking\n  public getSkillProgress(player: Player): { [key in keyof PlayerSkills]: { current: number; max: number; percentage: number } } {\n    const skills = player.getSkills();\n    const progress: any = {};\n\n    Object.keys(skills).forEach(skillKey => {\n      const skill = skillKey as keyof PlayerSkills;\n      const definition = this.skillDefinitions.get(skill);\n      if (definition) {\n        const current = skills[skill];\n        const max = definition.maxLevel;\n        progress[skill] = {\n          current,\n          max,\n          percentage: (current / max) * 100\n        };\n      }\n    });\n\n    return progress;\n  }\n\n  // Achievement checking\n  public checkSkillAchievements(player: Player): string[] {\n    const skills = player.getSkills();\n    const newAchievements: string[] = [];\n\n    // Check various skill-based achievements\n    Object.entries(skills).forEach(([skillKey, level]) => {\n      const skill = skillKey as keyof PlayerSkills;\n\n      // Milestone achievements\n      [3, 5, 7, 10].forEach(milestone => {\n        const achievementId = `${skill}_level_${milestone}`;\n        if (level >= milestone && !player.hasAchievement(achievementId)) {\n          player.unlockAchievement(achievementId);\n          newAchievements.push(achievementId);\n        }\n      });\n    });\n\n    // Synergy achievements\n    const synergies = this.getSkillSynergies(skills);\n    Object.keys(synergies).forEach(synergyName => {\n      const achievementId = `synergy_${synergyName.toLowerCase().replace(/\\s+/g, '_')}`;\n      if (!player.hasAchievement(achievementId)) {\n        player.unlockAchievement(achievementId);\n        newAchievements.push(achievementId);\n      }\n    });\n\n    return newAchievements;\n  }\n}","import { Player, PlayerSkills } from '../entities/Player';\n\nexport interface EquipmentItem {\n  id: string;\n  name: string;\n  description: string;\n  type: 'projector' | 'computer' | 'controller' | 'software' | 'accessory';\n  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n  cost: number;\n  level: number;\n  requirements?: {\n    skill: keyof PlayerSkills;\n    level: number;\n  }[];\n  stats: {\n    [key: string]: number;\n  };\n  effects?: string[];\n  icon: string;\n  image?: string;\n}\n\nexport interface EquipmentUpgrade {\n  id: string;\n  name: string;\n  description: string;\n  cost: number;\n  requirements?: {\n    skill: keyof PlayerSkills;\n    level: number;\n  }[];\n  statBoosts: {\n    [key: string]: number;\n  };\n}\n\nexport class EquipmentSystem {\n  private static instance: EquipmentSystem;\n  private equipmentDatabase: Map<string, EquipmentItem> = new Map();\n  private upgradeDatabase: Map<string, EquipmentUpgrade[]> = new Map();\n\n  private constructor() {\n    this.initializeEquipmentDatabase();\n    this.initializeUpgradeDatabase();\n  }\n\n  public static getInstance(): EquipmentSystem {\n    if (!EquipmentSystem.instance) {\n      EquipmentSystem.instance = new EquipmentSystem();\n    }\n    return EquipmentSystem.instance;\n  }\n\n  private initializeEquipmentDatabase(): void {\n    const equipment: EquipmentItem[] = [\n      // Computers\n      {\n        id: 'basic-laptop',\n        name: 'Basic Laptop',\n        description: 'A simple laptop for getting started with VJ software',\n        type: 'computer',\n        rarity: 'common',\n        cost: 0,\n        level: 1,\n        stats: {\n          processing: 1,\n          memory: 1,\n          graphics: 1\n        },\n        icon: '💻'\n      },\n      {\n        id: 'gaming-laptop',\n        name: 'Gaming Laptop',\n        description: 'A powerful gaming laptop with dedicated graphics',\n        type: 'computer',\n        rarity: 'uncommon',\n        cost: 500,\n        level: 3,\n        requirements: [\n          { skill: 'technicalMapping', level: 2 }\n        ],\n        stats: {\n          processing: 3,\n          memory: 2,\n          graphics: 4\n        },\n        icon: '🎮'\n      },\n      {\n        id: 'workstation',\n        name: 'Professional Workstation',\n        description: 'A high-end workstation built for professional VJ work',\n        type: 'computer',\n        rarity: 'rare',\n        cost: 2000,\n        level: 6,\n        requirements: [\n          { skill: 'technicalMapping', level: 5 },\n          { skill: 'equipmentMastery', level: 4 }\n        ],\n        stats: {\n          processing: 6,\n          memory: 5,\n          graphics: 7\n        },\n        effects: ['Multi-output support', 'Real-time effects'],\n        icon: '🖥️'\n      },\n      {\n        id: 'custom-rig',\n        name: 'Custom VJ Rig',\n        description: 'A custom-built rig optimized for VJ performance',\n        type: 'computer',\n        rarity: 'epic',\n        cost: 5000,\n        level: 8,\n        requirements: [\n          { skill: 'technicalMapping', level: 7 },\n          { skill: 'equipmentMastery', level: 7 }\n        ],\n        stats: {\n          processing: 9,\n          memory: 8,\n          graphics: 10\n        },\n        effects: ['Multi-output support', 'Real-time effects', 'Advanced shader support'],\n        icon: '⚡'\n      },\n\n      // Projectors\n      {\n        id: 'basic-projector',\n        name: 'Basic Projector',\n        description: 'A simple home projector for practice',\n        type: 'projector',\n        rarity: 'common',\n        cost: 200,\n        level: 1,\n        stats: {\n          brightness: 1,\n          resolution: 1,\n          colorAccuracy: 1\n        },\n        icon: '📽️'\n      },\n      {\n        id: 'venue-projector',\n        name: 'Venue Projector',\n        description: 'A mid-range projector suitable for small venues',\n        type: 'projector',\n        rarity: 'uncommon',\n        cost: 800,\n        level: 3,\n        requirements: [\n          { skill: 'equipmentMastery', level: 2 }\n        ],\n        stats: {\n          brightness: 3,\n          resolution: 3,\n          colorAccuracy: 2\n        },\n        icon: '🎬'\n      },\n      {\n        id: 'professional-projector',\n        name: 'Professional Projector',\n        description: 'A high-end projector for professional installations',\n        type: 'projector',\n        rarity: 'rare',\n        cost: 3000,\n        level: 6,\n        requirements: [\n          { skill: 'equipmentMastery', level: 5 }\n        ],\n        stats: {\n          brightness: 6,\n          resolution: 6,\n          colorAccuracy: 5\n        },\n        effects: ['Edge blending support', 'Advanced color correction'],\n        icon: '🌟'\n      },\n      {\n        id: 'laser-projector',\n        name: 'Laser Projector',\n        description: 'State-of-the-art laser projector for premium installations',\n        type: 'projector',\n        rarity: 'legendary',\n        cost: 10000,\n        level: 9,\n        requirements: [\n          { skill: 'equipmentMastery', level: 8 },\n          { skill: 'technicalMapping', level: 7 }\n        ],\n        stats: {\n          brightness: 10,\n          resolution: 9,\n          colorAccuracy: 10\n        },\n        effects: ['Edge blending support', 'Advanced color correction', 'Instant on/off', 'Extended lifespan'],\n        icon: '🔥'\n      },\n\n      // Controllers\n      {\n        id: 'midi-controller',\n        name: 'MIDI Controller',\n        description: 'A basic MIDI controller for real-time control',\n        type: 'controller',\n        rarity: 'common',\n        cost: 150,\n        level: 2,\n        requirements: [\n          { skill: 'technicalMapping', level: 1 }\n        ],\n        stats: {\n          responsiveness: 2,\n          features: 1\n        },\n        icon: '🎛️'\n      },\n      {\n        id: 'vj-controller',\n        name: 'VJ Controller',\n        description: 'A specialized controller designed for VJ performance',\n        type: 'controller',\n        rarity: 'uncommon',\n        cost: 400,\n        level: 4,\n        requirements: [\n          { skill: 'technicalMapping', level: 3 }\n        ],\n        stats: {\n          responsiveness: 4,\n          features: 3\n        },\n        effects: ['Crossfader support', 'Effect knobs'],\n        icon: '🎚️'\n      },\n      {\n        id: 'professional-controller',\n        name: 'Professional VJ Controller',\n        description: 'A high-end controller with advanced features',\n        type: 'controller',\n        rarity: 'rare',\n        cost: 1200,\n        level: 7,\n        requirements: [\n          { skill: 'technicalMapping', level: 6 },\n          { skill: 'equipmentMastery', level: 5 }\n        ],\n        stats: {\n          responsiveness: 7,\n          features: 6\n        },\n        effects: ['Crossfader support', 'Effect knobs', 'Touch strips', 'Custom mapping'],\n        icon: '🎹'\n      },\n\n      // Software\n      {\n        id: 'basic-vj-software',\n        name: 'Basic VJ Software',\n        description: 'Free open-source VJ software for beginners',\n        type: 'software',\n        rarity: 'common',\n        cost: 0,\n        level: 1,\n        stats: {\n          features: 1,\n          stability: 2\n        },\n        icon: '📱'\n      },\n      {\n        id: 'intermediate-vj-software',\n        name: 'VJ Pro',\n        description: 'Commercial VJ software with more features',\n        type: 'software',\n        rarity: 'uncommon',\n        cost: 300,\n        level: 3,\n        requirements: [\n          { skill: 'technicalMapping', level: 2 }\n        ],\n        stats: {\n          features: 3,\n          stability: 3\n        },\n        effects: ['Real-time effects', 'Multiple layers'],\n        icon: '💿'\n      },\n      {\n        id: 'professional-vj-software',\n        name: 'VJ Master Suite',\n        description: 'Professional VJ software suite with advanced features',\n        type: 'software',\n        rarity: 'epic',\n        cost: 1500,\n        level: 6,\n        requirements: [\n          { skill: 'technicalMapping', level: 5 }\n        ],\n        stats: {\n          features: 7,\n          stability: 6\n        },\n        effects: ['Real-time effects', 'Multiple layers', 'Advanced mapping', 'Plugin support'],\n        icon: '🏆'\n      },\n\n      // Accessories\n      {\n        id: 'capture-card',\n        name: 'Video Capture Card',\n        description: 'Capture external video sources',\n        type: 'accessory',\n        rarity: 'uncommon',\n        cost: 200,\n        level: 2,\n        stats: {\n          inputSources: 2\n        },\n        effects: ['External video input'],\n        icon: '📹'\n      },\n      {\n        id: 'audio-interface',\n        name: 'Audio Interface',\n        description: 'Professional audio input/output interface',\n        type: 'accessory',\n        rarity: 'rare',\n        cost: 500,\n        level: 4,\n        requirements: [\n          { skill: 'equipmentMastery', level: 3 }\n        ],\n        stats: {\n          audioQuality: 5\n        },\n        effects: ['High-quality audio', 'Multiple inputs'],\n        icon: '🎵'\n      }\n    ];\n\n    equipment.forEach(item => {\n      this.equipmentDatabase.set(item.id, item);\n    });\n  }\n\n  private initializeUpgradeDatabase(): void {\n    // Define upgrades for specific equipment\n    this.upgradeDatabase.set('basic-laptop', [\n      {\n        id: 'memory-upgrade',\n        name: 'Memory Upgrade',\n        description: 'Upgrade RAM for better performance',\n        cost: 100,\n        statBoosts: { memory: 1 }\n      },\n      {\n        id: 'graphics-upgrade',\n        name: 'Graphics Card Upgrade',\n        description: 'Add a dedicated graphics card',\n        cost: 300,\n        requirements: [{ skill: 'technicalMapping', level: 3 }],\n        statBoosts: { graphics: 2 }\n      }\n    ]);\n\n    this.upgradeDatabase.set('venue-projector', [\n      {\n        id: 'lens-upgrade',\n        name: 'Premium Lens',\n        description: 'High-quality lens for better image clarity',\n        cost: 200,\n        requirements: [{ skill: 'equipmentMastery', level: 3 }],\n        statBoosts: { resolution: 1, colorAccuracy: 1 }\n      },\n      {\n        id: 'lamp-upgrade',\n        name: 'High-Brightness Lamp',\n        description: 'Brighter lamp for better visibility',\n        cost: 150,\n        statBoosts: { brightness: 2 }\n      }\n    ]);\n  }\n\n  // Equipment management\n  public getEquipmentItem(id: string): EquipmentItem | undefined {\n    return this.equipmentDatabase.get(id);\n  }\n\n  public getAllEquipment(): EquipmentItem[] {\n    return Array.from(this.equipmentDatabase.values());\n  }\n\n  public getEquipmentByType(type: EquipmentItem['type']): EquipmentItem[] {\n    return this.getAllEquipment().filter(item => item.type === type);\n  }\n\n  public getAvailableEquipment(player: Player): EquipmentItem[] {\n    const playerSkills = player.getSkills();\n    const playerStats = player.getStats();\n\n    return this.getAllEquipment().filter(item => {\n      // Check level requirement\n      if (item.level > playerStats.level) return false;\n\n      // Check skill requirements\n      if (item.requirements) {\n        for (const req of item.requirements) {\n          if (playerSkills[req.skill] < req.level) return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public canAffordEquipment(player: Player, equipmentId: string): boolean {\n    const item = this.getEquipmentItem(equipmentId);\n    if (!item) return false;\n\n    const playerStats = player.getStats();\n    return playerStats.reputation >= item.cost;\n  }\n\n  public purchaseEquipment(player: Player, equipmentId: string): boolean {\n    const item = this.getEquipmentItem(equipmentId);\n    if (!item) return false;\n\n    const playerStats = player.getStats();\n\n    // Check if player can afford and meets requirements\n    if (!this.canAffordEquipment(player, equipmentId)) return false;\n    if (!this.getAvailableEquipment(player).some(eq => eq.id === equipmentId)) return false;\n\n    // Purchase the item\n    player.addReputation(-item.cost);\n    player.addToInventory(equipmentId, 1);\n\n    return true;\n  }\n\n  // Equipment upgrades\n  public getUpgrades(equipmentId: string): EquipmentUpgrade[] {\n    return this.upgradeDatabase.get(equipmentId) || [];\n  }\n\n  public canUpgradeEquipment(player: Player, equipmentId: string, upgradeId: string): boolean {\n    const upgrades = this.getUpgrades(equipmentId);\n    const upgrade = upgrades.find(u => u.id === upgradeId);\n\n    if (!upgrade) return false;\n\n    const playerSkills = player.getSkills();\n    const playerStats = player.getStats();\n\n    // Check cost\n    if (playerStats.reputation < upgrade.cost) return false;\n\n    // Check requirements\n    if (upgrade.requirements) {\n      for (const req of upgrade.requirements) {\n        if (playerSkills[req.skill] < req.level) return false;\n      }\n    }\n\n    // Check if player owns the equipment\n    if (!player.hasInInventory(equipmentId)) return false;\n\n    return true;\n  }\n\n  public upgradeEquipment(player: Player, equipmentId: string, upgradeId: string): boolean {\n    if (!this.canUpgradeEquipment(player, equipmentId, upgradeId)) return false;\n\n    const upgrades = this.getUpgrades(equipmentId);\n    const upgrade = upgrades.find(u => u.id === upgradeId);\n\n    if (!upgrade) return false;\n\n    // Apply upgrade\n    player.addReputation(-upgrade.cost);\n\n    // For simplicity, we'll track upgrades by adding upgraded items to inventory\n    const upgradedId = `${equipmentId}_${upgradeId}`;\n    player.removeFromInventory(equipmentId, 1);\n    player.addToInventory(upgradedId, 1);\n\n    return true;\n  }\n\n  // Equipment comparison\n  public compareEquipment(item1Id: string, item2Id: string): { [stat: string]: number } {\n    const item1 = this.getEquipmentItem(item1Id);\n    const item2 = this.getEquipmentItem(item2Id);\n\n    if (!item1 || !item2) return {};\n\n    const comparison: { [stat: string]: number } = {};\n    const allStats = new Set([...Object.keys(item1.stats), ...Object.keys(item2.stats)]);\n\n    allStats.forEach(stat => {\n      const stat1 = item1.stats[stat] || 0;\n      const stat2 = item2.stats[stat] || 0;\n      comparison[stat] = stat1 - stat2;\n    });\n\n    return comparison;\n  }\n\n  // Equipment recommendations\n  public getRecommendedEquipment(player: Player): EquipmentItem[] {\n    const available = this.getAvailableEquipment(player);\n    const currentEquipment = player.getEquipment();\n    const playerSkills = player.getSkills();\n\n    return available\n      .filter(item => {\n        // Don't recommend if player already owns a better version\n        const currentInSlot = currentEquipment[item.type as keyof typeof currentEquipment];\n        if (currentInSlot && typeof currentInSlot === 'string') {\n          const currentItem = this.getEquipmentItem(currentInSlot);\n          if (currentItem && currentItem.level >= item.level) return false;\n        }\n\n        return true;\n      })\n      .sort((a, b) => {\n        // Prioritize by player's strongest skills\n        let scoreA = 0;\n        let scoreB = 0;\n\n        if (a.requirements) {\n          scoreA += a.requirements.reduce((sum, req) => sum + playerSkills[req.skill], 0);\n        }\n        if (b.requirements) {\n          scoreB += b.requirements.reduce((sum, req) => sum + playerSkills[req.skill], 0);\n        }\n\n        return scoreB - scoreA;\n      })\n      .slice(0, 5);\n  }\n\n  // Equipment effects calculation\n  public calculateEquipmentBonuses(player: Player): { [key: string]: number } {\n    const equipment = player.getEquipment();\n    const bonuses: { [key: string]: number } = {};\n\n    // Calculate bonuses from each equipped item\n    Object.entries(equipment).forEach(([slot, itemId]) => {\n      if (typeof itemId === 'string') {\n        const item = this.getEquipmentItem(itemId);\n        if (item) {\n          Object.entries(item.stats).forEach(([stat, value]) => {\n            bonuses[stat] = (bonuses[stat] || 0) + value;\n          });\n        }\n      }\n    });\n\n    // Software bonuses\n    if (equipment.software) {\n      equipment.software.forEach(softwareId => {\n        const item = this.getEquipmentItem(softwareId);\n        if (item) {\n          Object.entries(item.stats).forEach(([stat, value]) => {\n            bonuses[stat] = (bonuses[stat] || 0) + value;\n          });\n        }\n      });\n    }\n\n    // Accessory bonuses\n    if (equipment.accessories) {\n      equipment.accessories.forEach(accessoryId => {\n        const item = this.getEquipmentItem(accessoryId);\n        if (item) {\n          Object.entries(item.stats).forEach(([stat, value]) => {\n            bonuses[stat] = (bonuses[stat] || 0) + value;\n          });\n        }\n      });\n    }\n\n    return bonuses;\n  }\n\n  // Equipment sets and synergies\n  public getEquipmentSynergies(player: Player): string[] {\n    const equipment = player.getEquipment();\n    const synergies: string[] = [];\n\n    // Professional setup synergy\n    const hasHighEndComputer = equipment.computer === 'workstation' || equipment.computer === 'custom-rig';\n    const hasHighEndProjector = equipment.projector === 'professional-projector' || equipment.projector === 'laser-projector';\n    const hasController = equipment.controller !== null;\n\n    if (hasHighEndComputer && hasHighEndProjector && hasController) {\n      synergies.push('Professional Setup');\n    }\n\n    // Beginner synergy\n    const hasBasicEquipment = equipment.computer === 'basic-laptop' && equipment.projector === 'basic-projector';\n    if (hasBasicEquipment) {\n      synergies.push('Getting Started');\n    }\n\n    return synergies;\n  }\n\n  // Market simulation\n  public getMarketPrices(): { [itemId: string]: { current: number; trend: 'up' | 'down' | 'stable' } } {\n    // Simulate market fluctuations\n    const prices: { [itemId: string]: { current: number; trend: 'up' | 'down' | 'stable' } } = {};\n\n    this.getAllEquipment().forEach(item => {\n      const baseFactor = 0.8 + (Math.random() * 0.4); // 0.8 to 1.2\n      const current = Math.floor(item.cost * baseFactor);\n\n      let trend: 'up' | 'down' | 'stable' = 'stable';\n      if (baseFactor < 0.9) trend = 'down';\n      else if (baseFactor > 1.1) trend = 'up';\n\n      prices[item.id] = { current, trend };\n    });\n\n    return prices;\n  }\n}","import { Player, PlayerSkills } from '../entities/Player';\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n  category: 'skill' | 'equipment' | 'social' | 'milestone' | 'secret';\n  points: number;\n  requirements: AchievementRequirement[];\n  rewards?: AchievementReward[];\n  hidden?: boolean; // Hidden until unlocked\n}\n\nexport interface AchievementRequirement {\n  type: 'skill_level' | 'total_experience' | 'equipment_owned' | 'reputation' | 'custom';\n  skill?: keyof PlayerSkills;\n  value: number;\n  customCheck?: (player: Player) => boolean;\n  description: string;\n}\n\nexport interface AchievementReward {\n  type: 'experience' | 'reputation' | 'item' | 'unlock';\n  value?: number;\n  itemId?: string;\n  unlockId?: string;\n}\n\nexport interface AchievementProgress {\n  achievementId: string;\n  progress: number;\n  maxProgress: number;\n  completed: boolean;\n  unlockedAt?: Date;\n}\n\nexport class AchievementSystem {\n  private static instance: AchievementSystem;\n  private achievements: Map<string, Achievement> = new Map();\n  private playerProgress: Map<string, AchievementProgress> = new Map();\n\n  private constructor() {\n    this.initializeAchievements();\n  }\n\n  public static getInstance(): AchievementSystem {\n    if (!AchievementSystem.instance) {\n      AchievementSystem.instance = new AchievementSystem();\n    }\n    return AchievementSystem.instance;\n  }\n\n  private initializeAchievements(): void {\n    const achievements: Achievement[] = [\n      // Skill Achievements\n      {\n        id: 'first_steps',\n        name: 'First Steps',\n        description: 'Reach level 2 in any skill',\n        icon: '👶',\n        rarity: 'common',\n        category: 'skill',\n        points: 10,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Reach level 2 in any skill',\n            customCheck: (player) => {\n              const skills = player.getSkills();\n              return Object.values(skills).some(level => level >= 2);\n            }\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 50 }\n        ]\n      },\n      {\n        id: 'technical_mapping_novice',\n        name: 'Mapping Novice',\n        description: 'Reach Technical Mapping level 3',\n        icon: '🔧',\n        rarity: 'common',\n        category: 'skill',\n        points: 15,\n        requirements: [\n          {\n            type: 'skill_level',\n            skill: 'technicalMapping',\n            value: 3,\n            description: 'Technical Mapping level 3'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 75 },\n          { type: 'unlock', unlockId: 'mapping_tutorial_advanced' }\n        ]\n      },\n      {\n        id: 'technical_mapping_expert',\n        name: 'Mapping Expert',\n        description: 'Reach Technical Mapping level 7',\n        icon: '⚙️',\n        rarity: 'rare',\n        category: 'skill',\n        points: 50,\n        requirements: [\n          {\n            type: 'skill_level',\n            skill: 'technicalMapping',\n            value: 7,\n            description: 'Technical Mapping level 7'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 200 },\n          { type: 'reputation', value: 100 },\n          { type: 'unlock', unlockId: 'expert_mapping_tools' }\n        ]\n      },\n      {\n        id: 'technical_mapping_master',\n        name: 'Mapping Master',\n        description: 'Reach Technical Mapping level 10',\n        icon: '🏆',\n        rarity: 'legendary',\n        category: 'skill',\n        points: 100,\n        requirements: [\n          {\n            type: 'skill_level',\n            skill: 'technicalMapping',\n            value: 10,\n            description: 'Technical Mapping level 10'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 500 },\n          { type: 'reputation', value: 300 },\n          { type: 'unlock', unlockId: 'mapping_master_title' }\n        ]\n      },\n      {\n        id: 'artistic_vision_novice',\n        name: 'Creative Eye',\n        description: 'Reach Artistic Vision level 3',\n        icon: '🎨',\n        rarity: 'common',\n        category: 'skill',\n        points: 15,\n        requirements: [\n          {\n            type: 'skill_level',\n            skill: 'artisticVision',\n            value: 3,\n            description: 'Artistic Vision level 3'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 75 }\n        ]\n      },\n      {\n        id: 'artistic_vision_master',\n        name: 'Visionary Artist',\n        description: 'Reach Artistic Vision level 10',\n        icon: '🌟',\n        rarity: 'legendary',\n        category: 'skill',\n        points: 100,\n        requirements: [\n          {\n            type: 'skill_level',\n            skill: 'artisticVision',\n            value: 10,\n            description: 'Artistic Vision level 10'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 500 },\n          { type: 'reputation', value: 300 }\n        ]\n      },\n      {\n        id: 'equipment_mastery_expert',\n        name: 'Gear Head',\n        description: 'Reach Equipment Mastery level 7',\n        icon: '🛠️',\n        rarity: 'rare',\n        category: 'skill',\n        points: 50,\n        requirements: [\n          {\n            type: 'skill_level',\n            skill: 'equipmentMastery',\n            value: 7,\n            description: 'Equipment Mastery level 7'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 200 },\n          { type: 'reputation', value: 100 }\n        ]\n      },\n      {\n        id: 'social_media_influencer',\n        name: 'Social Media Influencer',\n        description: 'Reach Social Media level 8',\n        icon: '📱',\n        rarity: 'epic',\n        category: 'social',\n        points: 75,\n        requirements: [\n          {\n            type: 'skill_level',\n            skill: 'socialMedia',\n            value: 8,\n            description: 'Social Media level 8'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 300 },\n          { type: 'reputation', value: 200 },\n          { type: 'unlock', unlockId: 'influencer_perks' }\n        ]\n      },\n      {\n        id: 'collaboration_master',\n        name: 'Team Player',\n        description: 'Reach Collaboration level 10',\n        icon: '🤝',\n        rarity: 'legendary',\n        category: 'social',\n        points: 100,\n        requirements: [\n          {\n            type: 'skill_level',\n            skill: 'collaboration',\n            value: 10,\n            description: 'Collaboration level 10'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 500 },\n          { type: 'reputation', value: 300 }\n        ]\n      },\n\n      // Multi-skill achievements\n      {\n        id: 'well_rounded',\n        name: 'Well Rounded',\n        description: 'Reach level 5 in all skills',\n        icon: '⭐',\n        rarity: 'epic',\n        category: 'skill',\n        points: 75,\n        requirements: [\n          {\n            type: 'custom',\n            value: 5,\n            description: 'All skills at level 5',\n            customCheck: (player) => {\n              const skills = player.getSkills();\n              return Object.values(skills).every(level => level >= 5);\n            }\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 300 },\n          { type: 'reputation', value: 150 },\n          { type: 'unlock', unlockId: 'balanced_bonus' }\n        ]\n      },\n      {\n        id: 'perfectionist',\n        name: 'Perfectionist',\n        description: 'Reach level 10 in all skills',\n        icon: '💎',\n        rarity: 'legendary',\n        category: 'skill',\n        points: 200,\n        requirements: [\n          {\n            type: 'custom',\n            value: 10,\n            description: 'All skills at level 10',\n            customCheck: (player) => {\n              const skills = player.getSkills();\n              return Object.values(skills).every(level => level >= 10);\n            }\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 1000 },\n          { type: 'reputation', value: 500 },\n          { type: 'unlock', unlockId: 'master_vj_title' }\n        ]\n      },\n\n      // Equipment achievements\n      {\n        id: 'first_upgrade',\n        name: 'First Upgrade',\n        description: 'Purchase your first equipment upgrade',\n        icon: '📦',\n        rarity: 'common',\n        category: 'equipment',\n        points: 10,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Own any non-starter equipment',\n            customCheck: (player) => {\n              const inventory = player.getInventory();\n              const equipment = player.getEquipment();\n\n              // Check for any equipment other than starting items\n              const hasUpgrade = Array.from(inventory.keys()).some(item =>\n                item !== 'basic-laptop' && item !== 'basic-vj-software'\n              ) || Object.values(equipment).some(item =>\n                item && item !== 'basic-laptop' && item !== 'basic-vj-software'\n              );\n\n              return hasUpgrade;\n            }\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 25 }\n        ]\n      },\n      {\n        id: 'gear_collector',\n        name: 'Gear Collector',\n        description: 'Own 10 different pieces of equipment',\n        icon: '🎛️',\n        rarity: 'uncommon',\n        category: 'equipment',\n        points: 25,\n        requirements: [\n          {\n            type: 'custom',\n            value: 10,\n            description: 'Own 10 different equipment items',\n            customCheck: (player) => {\n              const inventory = player.getInventory();\n              return inventory.size >= 10;\n            }\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 100 },\n          { type: 'reputation', value: 50 }\n        ]\n      },\n      {\n        id: 'high_end_setup',\n        name: 'High-End Setup',\n        description: 'Own a professional projector and workstation',\n        icon: '💻',\n        rarity: 'rare',\n        category: 'equipment',\n        points: 40,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Own professional projector and workstation',\n            customCheck: (player) => {\n              const inventory = player.getInventory();\n              const equipment = player.getEquipment();\n\n              const hasProProjector = inventory.has('professional-projector') ||\n                                     inventory.has('laser-projector') ||\n                                     equipment.projector === 'professional-projector' ||\n                                     equipment.projector === 'laser-projector';\n\n              const hasWorkstation = inventory.has('workstation') ||\n                                    inventory.has('custom-rig') ||\n                                    equipment.computer === 'workstation' ||\n                                    equipment.computer === 'custom-rig';\n\n              return hasProProjector && hasWorkstation;\n            }\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 200 },\n          { type: 'reputation', value: 100 }\n        ]\n      },\n\n      // Milestone achievements\n      {\n        id: 'level_10',\n        name: 'Rising Star',\n        description: 'Reach player level 10',\n        icon: '⭐',\n        rarity: 'uncommon',\n        category: 'milestone',\n        points: 20,\n        requirements: [\n          {\n            type: 'custom',\n            value: 10,\n            description: 'Player level 10',\n            customCheck: (player) => player.getStats().level >= 10\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 100 },\n          { type: 'reputation', value: 50 }\n        ]\n      },\n      {\n        id: 'level_25',\n        name: 'Experienced VJ',\n        description: 'Reach player level 25',\n        icon: '🌟',\n        rarity: 'rare',\n        category: 'milestone',\n        points: 50,\n        requirements: [\n          {\n            type: 'custom',\n            value: 25,\n            description: 'Player level 25',\n            customCheck: (player) => player.getStats().level >= 25\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 250 },\n          { type: 'reputation', value: 150 }\n        ]\n      },\n      {\n        id: 'reputation_1000',\n        name: 'Well Known',\n        description: 'Earn 1000 reputation',\n        icon: '👑',\n        rarity: 'uncommon',\n        category: 'social',\n        points: 25,\n        requirements: [\n          {\n            type: 'reputation',\n            value: 1000,\n            description: '1000 reputation'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 150 }\n        ]\n      },\n      {\n        id: 'reputation_5000',\n        name: 'Famous VJ',\n        description: 'Earn 5000 reputation',\n        icon: '🏆',\n        rarity: 'epic',\n        category: 'social',\n        points: 75,\n        requirements: [\n          {\n            type: 'reputation',\n            value: 5000,\n            description: '5000 reputation'\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 400 },\n          { type: 'unlock', unlockId: 'vip_access' }\n        ]\n      },\n\n      // Secret achievements\n      {\n        id: 'secret_combo',\n        name: 'Secret Combo',\n        description: 'Discover a hidden feature',\n        icon: '🔒',\n        rarity: 'rare',\n        category: 'secret',\n        points: 30,\n        hidden: true,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Perform secret combination',\n            customCheck: () => false // This would be triggered by specific game events\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 100 },\n          { type: 'unlock', unlockId: 'secret_feature' }\n        ]\n      },\n\n      // Red Rocks Level 4 Achievements\n      {\n        id: 'red_rocks_performer',\n        name: 'Red Rocks Performer',\n        description: 'Perform at the legendary Red Rocks Amphitheatre',\n        icon: '🏔️',\n        rarity: 'epic',\n        category: 'milestone',\n        points: 100,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Complete Red Rocks Level 4',\n            customCheck: (player) => player.hasUnlockedContent('red_rocks_completed')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 500 },\n          { type: 'reputation', value: 300 },\n          { type: 'unlock', unlockId: 'red_rocks_performer_title' }\n        ]\n      },\n      {\n        id: 'red_rocks_legend',\n        name: 'Red Rocks Legend',\n        description: 'Achieve a perfect 90+ rating at Red Rocks Amphitheatre',\n        icon: '⭐',\n        rarity: 'legendary',\n        category: 'milestone',\n        points: 200,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Score 90+ at Red Rocks',\n            customCheck: (player) => player.hasUnlockedContent('red_rocks_legend_rating')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 1000 },\n          { type: 'reputation', value: 500 },\n          { type: 'unlock', unlockId: 'red_rocks_legend_status' },\n          { type: 'unlock', unlockId: 'legendary_vj_title' }\n        ]\n      },\n      {\n        id: 'visual_virtuoso',\n        name: 'Visual Virtuoso',\n        description: 'Master the art of visual performance with flawless execution',\n        icon: '🎨',\n        rarity: 'legendary',\n        category: 'skill',\n        points: 150,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Perfect visual performance',\n            customCheck: (player) => player.hasUnlockedContent('visual_virtuoso_performance')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 750 },\n          { type: 'reputation', value: 400 },\n          { type: 'unlock', unlockId: 'virtuoso_effects_pack' }\n        ]\n      },\n      {\n        id: 'lightbrush_master',\n        name: 'Lightbrush Master',\n        description: 'Complete the ultimate VJ journey and become a true master',\n        icon: '🏆',\n        rarity: 'legendary',\n        category: 'milestone',\n        points: 250,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Complete the VJ Career RPG',\n            customCheck: (player) => player.hasUnlockedContent('game_completed')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 1500 },\n          { type: 'reputation', value: 750 },\n          { type: 'unlock', unlockId: 'master_vj_certification' },\n          { type: 'unlock', unlockId: 'post_game_content' }\n        ]\n      },\n      {\n        id: 'red_rocks_star',\n        name: 'Red Rocks Star',\n        description: 'Earn a 75+ rating at Red Rocks with great crowd reaction',\n        icon: '🌟',\n        rarity: 'rare',\n        category: 'social',\n        points: 75,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Score 75+ at Red Rocks',\n            customCheck: (player) => player.hasUnlockedContent('red_rocks_star_rating')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 400 },\n          { type: 'reputation', value: 250 },\n          { type: 'unlock', unlockId: 'star_performer_perks' }\n        ]\n      },\n      {\n        id: 'crowd_favorite',\n        name: 'Crowd Favorite',\n        description: 'Get the crowd to their feet with outstanding energy',\n        icon: '👏',\n        rarity: 'rare',\n        category: 'social',\n        points: 60,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Achieve high crowd energy',\n            customCheck: (player) => player.hasUnlockedContent('crowd_favorite_energy')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 300 },\n          { type: 'reputation', value: 200 },\n          { type: 'unlock', unlockId: 'crowd_interaction_tools' }\n        ]\n      },\n      {\n        id: 'technical_master',\n        name: 'Technical Master',\n        description: 'Handle equipment malfunctions with professional expertise',\n        icon: '⚙️',\n        rarity: 'rare',\n        category: 'skill',\n        points: 80,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Successfully manage technical crises',\n            customCheck: (player) => player.hasUnlockedContent('technical_crisis_master')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 350 },\n          { type: 'reputation', value: 175 },\n          { type: 'unlock', unlockId: 'advanced_troubleshooting' }\n        ]\n      },\n      {\n        id: 'pyrotechnic_vj',\n        name: 'Pyrotechnic VJ',\n        description: 'Master the combination of fireworks and laser shows',\n        icon: '🎆',\n        rarity: 'epic',\n        category: 'skill',\n        points: 90,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Execute perfect fireworks and laser finale',\n            customCheck: (player) => player.hasUnlockedContent('pyrotechnic_finale_master')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 450 },\n          { type: 'reputation', value: 275 },\n          { type: 'unlock', unlockId: 'pyrotechnic_effects_suite' }\n        ]\n      },\n      {\n        id: 'colorado_native',\n        name: 'Colorado Native',\n        description: 'Feel at home performing in the beautiful Colorado landscape',\n        icon: '🏔️',\n        rarity: 'uncommon',\n        category: 'milestone',\n        points: 40,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Appreciate the Red Rocks environment',\n            customCheck: (player) => player.hasUnlockedContent('colorado_appreciation')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 200 },\n          { type: 'reputation', value: 100 },\n          { type: 'unlock', unlockId: 'colorado_themed_effects' }\n        ]\n      },\n      {\n        id: 'amphitheater_architect',\n        name: 'Amphitheater Architect',\n        description: 'Understand and master the unique acoustics and visuals of Red Rocks',\n        icon: '🏛️',\n        rarity: 'rare',\n        category: 'skill',\n        points: 70,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Master amphitheater performance dynamics',\n            customCheck: (player) => player.hasUnlockedContent('amphitheater_mastery')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 325 },\n          { type: 'reputation', value: 200 },\n          { type: 'unlock', unlockId: 'architectural_lighting_tools' }\n        ]\n      },\n      {\n        id: 'led_wall_specialist',\n        name: 'LED Wall Specialist',\n        description: 'Master the massive LED display systems at Red Rocks',\n        icon: '📺',\n        rarity: 'rare',\n        category: 'equipment',\n        points: 65,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Excel with professional LED wall systems',\n            customCheck: (player) => player.hasUnlockedContent('led_wall_mastery')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 300 },\n          { type: 'reputation', value: 150 },\n          { type: 'unlock', unlockId: 'advanced_led_controls' }\n        ]\n      },\n      {\n        id: 'beat_sync_master',\n        name: 'Beat Sync Master',\n        description: 'Perfect synchronization with music and crowd energy',\n        icon: '🎵',\n        rarity: 'epic',\n        category: 'skill',\n        points: 85,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Achieve perfect beat synchronization',\n            customCheck: (player) => player.hasUnlockedContent('beat_sync_perfection')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 400 },\n          { type: 'reputation', value: 225 },\n          { type: 'unlock', unlockId: 'rhythm_visualization_tools' }\n        ]\n      },\n      {\n        id: 'standing_ovation',\n        name: 'Standing Ovation',\n        description: 'Receive a standing ovation from the entire Red Rocks crowd',\n        icon: '👏',\n        rarity: 'epic',\n        category: 'social',\n        points: 120,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Earn standing ovation from full crowd',\n            customCheck: (player) => player.hasUnlockedContent('standing_ovation_achieved')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 600 },\n          { type: 'reputation', value: 350 },\n          { type: 'unlock', unlockId: 'ovation_memories' }\n        ]\n      },\n      {\n        id: 'phone_light_symphony',\n        name: 'Phone Light Symphony',\n        description: 'Create a magical moment with thousands of phone flashlights',\n        icon: '📱',\n        rarity: 'rare',\n        category: 'social',\n        points: 55,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Activate crowd phone lights en masse',\n            customCheck: (player) => player.hasUnlockedContent('phone_light_symphony')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 275 },\n          { type: 'reputation', value: 175 },\n          { type: 'unlock', unlockId: 'crowd_interaction_mastery' }\n        ]\n      },\n      {\n        id: 'equipment_crisis_manager',\n        name: 'Equipment Crisis Manager',\n        description: 'Successfully handle multiple equipment failures during the show',\n        icon: '🚨',\n        rarity: 'rare',\n        category: 'skill',\n        points: 70,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Manage multiple equipment crises',\n            customCheck: (player) => player.hasUnlockedContent('crisis_management_expert')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 350 },\n          { type: 'reputation', value: 200 },\n          { type: 'unlock', unlockId: 'emergency_protocols' }\n        ]\n      },\n      {\n        id: 'finale_creator',\n        name: 'Finale Creator',\n        description: 'Craft an unforgettable finale experience',\n        icon: '🎭',\n        rarity: 'epic',\n        category: 'skill',\n        points: 95,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Create spectacular finale sequence',\n            customCheck: (player) => player.hasUnlockedContent('finale_creator_mastery')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 500 },\n          { type: 'reputation', value: 300 },\n          { type: 'unlock', unlockId: 'finale_composition_tools' }\n        ]\n      },\n      {\n        id: 'professional_review_excellence',\n        name: 'Professional Review Excellence',\n        description: 'Receive perfect 10/10 ratings from industry professionals',\n        icon: '⭐',\n        rarity: 'legendary',\n        category: 'milestone',\n        points: 180,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Achieve perfect professional ratings',\n            customCheck: (player) => player.hasUnlockedContent('perfect_professional_rating')\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 800 },\n          { type: 'reputation', value: 500 },\n          { type: 'unlock', unlockId: 'industry_recognition' }\n        ]\n      },\n      {\n        id: 'red_rocks_hall_of_fame',\n        name: 'Red Rocks Hall of Fame',\n        description: 'Join the legendary performers who have graced Red Rocks',\n        icon: '🏛️',\n        rarity: 'legendary',\n        category: 'milestone',\n        points: 300,\n        hidden: true,\n        requirements: [\n          {\n            type: 'custom',\n            value: 1,\n            description: 'Achieve legendary status at Red Rocks',\n            customCheck: (player) => {\n              return player.hasAchievement('red_rocks_legend') &&\n                     player.hasAchievement('standing_ovation') &&\n                     player.hasAchievement('professional_review_excellence') &&\n                     player.getStats().reputation >= 10000;\n            }\n          }\n        ],\n        rewards: [\n          { type: 'experience', value: 2000 },\n          { type: 'reputation', value: 1000 },\n          { type: 'unlock', unlockId: 'hall_of_fame_status' },\n          { type: 'unlock', unlockId: 'eternal_recognition' }\n        ]\n      }\n    ];\n\n    achievements.forEach(achievement => {\n      this.achievements.set(achievement.id, achievement);\n    });\n  }\n\n  // Achievement management\n  public getAchievement(id: string): Achievement | undefined {\n    return this.achievements.get(id);\n  }\n\n  public getAllAchievements(): Achievement[] {\n    return Array.from(this.achievements.values());\n  }\n\n  public getVisibleAchievements(): Achievement[] {\n    return this.getAllAchievements().filter(a => !a.hidden);\n  }\n\n  public getAchievementsByCategory(category: Achievement['category']): Achievement[] {\n    return this.getAllAchievements().filter(a => a.category === category);\n  }\n\n  // Progress tracking\n  public checkAchievements(player: Player): string[] {\n    const newUnlocks: string[] = [];\n\n    this.achievements.forEach((achievement, id) => {\n      if (player.hasAchievement(id)) return; // Already unlocked\n\n      let progress = 0;\n      let maxProgress = 1;\n      let completed = true;\n\n      // Check all requirements\n      for (const req of achievement.requirements) {\n        const reqResult = this.checkRequirement(player, req);\n        progress += reqResult.progress;\n        maxProgress += reqResult.maxProgress;\n\n        if (!reqResult.completed) {\n          completed = false;\n        }\n      }\n\n      // Update progress\n      this.playerProgress.set(id, {\n        achievementId: id,\n        progress,\n        maxProgress,\n        completed,\n        unlockedAt: completed ? new Date() : undefined\n      });\n\n      // Unlock if completed\n      if (completed && player.unlockAchievement(id)) {\n        newUnlocks.push(id);\n        this.grantAchievementRewards(player, achievement);\n      }\n    });\n\n    return newUnlocks;\n  }\n\n  private checkRequirement(player: Player, requirement: AchievementRequirement): {\n    progress: number;\n    maxProgress: number;\n    completed: boolean;\n  } {\n    switch (requirement.type) {\n      case 'skill_level':\n        if (requirement.skill) {\n          const currentLevel = player.getSkillLevel(requirement.skill);\n          return {\n            progress: Math.min(currentLevel, requirement.value),\n            maxProgress: requirement.value,\n            completed: currentLevel >= requirement.value\n          };\n        }\n        break;\n\n      case 'total_experience':\n        const experience = player.getStats().experience;\n        return {\n          progress: Math.min(experience, requirement.value),\n          maxProgress: requirement.value,\n          completed: experience >= requirement.value\n        };\n\n      case 'reputation':\n        const reputation = player.getStats().reputation;\n        return {\n          progress: Math.min(reputation, requirement.value),\n          maxProgress: requirement.value,\n          completed: reputation >= requirement.value\n        };\n\n      case 'equipment_owned':\n        const inventory = player.getInventory();\n        const totalItems = Array.from(inventory.values()).reduce((sum, count) => sum + count, 0);\n        return {\n          progress: Math.min(totalItems, requirement.value),\n          maxProgress: requirement.value,\n          completed: totalItems >= requirement.value\n        };\n\n      case 'custom':\n        if (requirement.customCheck) {\n          const completed = requirement.customCheck(player);\n          return {\n            progress: completed ? requirement.value : 0,\n            maxProgress: requirement.value,\n            completed\n          };\n        }\n        break;\n    }\n\n    return { progress: 0, maxProgress: 1, completed: false };\n  }\n\n  private grantAchievementRewards(player: Player, achievement: Achievement): void {\n    if (!achievement.rewards) return;\n\n    achievement.rewards.forEach(reward => {\n      switch (reward.type) {\n        case 'experience':\n          if (reward.value) {\n            player.addExperience(reward.value);\n          }\n          break;\n\n        case 'reputation':\n          if (reward.value) {\n            player.addReputation(reward.value);\n          }\n          break;\n\n        case 'item':\n          if (reward.itemId) {\n            player.addToInventory(reward.itemId, 1);\n          }\n          break;\n\n        case 'unlock':\n          if (reward.unlockId) {\n            player.unlockContent(reward.unlockId);\n          }\n          break;\n      }\n    });\n  }\n\n  // Progress queries\n  public getAchievementProgress(achievementId: string): AchievementProgress | undefined {\n    return this.playerProgress.get(achievementId);\n  }\n\n  public getAllProgress(): AchievementProgress[] {\n    return Array.from(this.playerProgress.values());\n  }\n\n  public getCompletedAchievements(): AchievementProgress[] {\n    return this.getAllProgress().filter(p => p.completed);\n  }\n\n  public getInProgressAchievements(): AchievementProgress[] {\n    return this.getAllProgress().filter(p => !p.completed && p.progress > 0);\n  }\n\n  // Statistics\n  public getAchievementStats(player: Player): {\n    total: number;\n    unlocked: number;\n    totalPoints: number;\n    earnedPoints: number;\n    completionPercentage: number;\n  } {\n    const totalAchievements = this.achievements.size;\n    const unlockedAchievements = player.getAchievements().size;\n\n    const totalPoints = Array.from(this.achievements.values())\n      .reduce((sum, a) => sum + a.points, 0);\n\n    const earnedPoints = Array.from(player.getAchievements())\n      .map(id => this.achievements.get(id)?.points || 0)\n      .reduce((sum, points) => sum + points, 0);\n\n    return {\n      total: totalAchievements,\n      unlocked: unlockedAchievements,\n      totalPoints,\n      earnedPoints,\n      completionPercentage: (unlockedAchievements / totalAchievements) * 100\n    };\n  }\n\n  public getRecentAchievements(player: Player, limit: number = 5): Achievement[] {\n    const playerAchievements = Array.from(player.getAchievements());\n\n    return playerAchievements\n      .slice(-limit)\n      .map(id => this.achievements.get(id))\n      .filter(a => a !== undefined) as Achievement[];\n  }\n\n  // Special achievement triggers\n  public triggerSecretAchievement(player: Player, secretId: string): boolean {\n    const achievement = this.achievements.get(secretId);\n    if (!achievement || !achievement.hidden) return false;\n\n    if (player.unlockAchievement(secretId)) {\n      this.grantAchievementRewards(player, achievement);\n      return true;\n    }\n\n    return false;\n  }\n\n  // Achievement recommendations\n  public getNearCompletionAchievements(player: Player, threshold: number = 0.7): Achievement[] {\n    return Array.from(this.achievements.values())\n      .filter(achievement => {\n        if (player.hasAchievement(achievement.id)) return false;\n\n        const progress = this.playerProgress.get(achievement.id);\n        if (!progress) return false;\n\n        const completionRatio = progress.progress / progress.maxProgress;\n        return completionRatio >= threshold;\n      })\n      .sort((a, b) => {\n        const progressA = this.playerProgress.get(a.id);\n        const progressB = this.playerProgress.get(b.id);\n\n        const ratioA = progressA ? progressA.progress / progressA.maxProgress : 0;\n        const ratioB = progressB ? progressB.progress / progressB.maxProgress : 0;\n\n        return ratioB - ratioA;\n      });\n  }\n}","import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { Player } from '../game/entities/Player';\nimport type { PlayerStats, PlayerSkills, PlayerEquipment, PlayerPosition } from '../game/entities/Player';\nimport { SkillSystem } from '../game/systems/SkillSystem';\nimport { EquipmentSystem } from '../game/systems/EquipmentSystem';\nimport { AchievementSystem } from '../game/systems/AchievementSystem';\n\nexport interface PlayerState {\n  // Player instance and data\n  player: Player;\n\n  // Cached player data for performance\n  stats: PlayerStats;\n  skills: PlayerSkills;\n  equipment: PlayerEquipment;\n  position: PlayerPosition;\n  inventory: Map<string, number>;\n  achievements: Set<string>;\n  unlockedContent: Set<string>;\n\n  // System instances\n  skillSystem: SkillSystem;\n  equipmentSystem: EquipmentSystem;\n  achievementSystem: AchievementSystem;\n\n  // Save/Load system\n  autoSaveEnabled: boolean;\n  lastSaveTime: number;\n  saveSlots: Array<{\n    id: number;\n    name: string;\n    timestamp: number;\n    playerLevel: number;\n    location: string;\n    playtime: number;\n  } | null>;\n\n  // Game session tracking\n  sessionStartTime: number;\n  totalPlaytime: number; // in seconds\n\n  // Actions\n  initializePlayer: () => void;\n  refreshPlayerData: () => void;\n\n  // Stat actions\n  addExperience: (amount: number) => boolean;\n  addReputation: (amount: number) => void;\n  addMoney: (amount: number) => void;\n  spendMoney: (amount: number) => boolean;\n  consumeEnergy: (amount: number) => boolean;\n  restoreEnergy: (amount: number) => void;\n\n  // Skill actions\n  upgradeSkill: (skill: keyof PlayerSkills) => boolean;\n  canUpgradeSkill: (skill: keyof PlayerSkills) => { canUpgrade: boolean; reason?: string };\n  getSkillProgress: () => { [key in keyof PlayerSkills]: { current: number; max: number; percentage: number } };\n\n  // Equipment actions\n  equipItem: (slot: keyof Omit<PlayerEquipment, 'software' | 'accessories'>, itemId: string) => boolean;\n  unequipItem: (slot: keyof Omit<PlayerEquipment, 'software' | 'accessories'>) => boolean;\n  purchaseEquipment: (equipmentId: string) => boolean;\n  getAvailableEquipment: () => any[];\n\n  // Inventory actions\n  addToInventory: (itemId: string, quantity?: number) => void;\n  removeFromInventory: (itemId: string, quantity?: number) => boolean;\n  hasInInventory: (itemId: string, quantity?: number) => boolean;\n  getInventoryCount: (itemId: string) => number;\n\n  // Position actions\n  setPosition: (x: number, y: number, scene?: string) => void;\n  moveBy: (dx: number, dy: number) => void;\n\n  // Achievement actions\n  checkAchievements: () => string[];\n  getAchievementStats: () => {\n    total: number;\n    unlocked: number;\n    totalPoints: number;\n    earnedPoints: number;\n    completionPercentage: number;\n  };\n\n  // Content unlocking\n  unlockContent: (contentId: string) => void;\n  hasUnlockedContent: (contentId: string) => boolean;\n\n  // Save/Load actions\n  saveGame: (slotId?: number, name?: string) => Promise<boolean>;\n  loadGame: (slotId: number) => Promise<boolean>;\n  deleteSave: (slotId: number) => boolean;\n  getSaveSlots: () => Array<PlayerState['saveSlots'][0]>;\n  setAutoSave: (enabled: boolean) => void;\n\n  // Session management\n  startSession: () => void;\n  updatePlaytime: () => void;\n  getSessionDuration: () => number;\n\n  // Utility actions\n  resetPlayer: () => void;\n  exportPlayerData: () => string;\n  importPlayerData: (data: string) => boolean;\n}\n\nexport const usePlayerStore = create<PlayerState>()(\n  subscribeWithSelector((set, get) => ({\n    // Initialize with new player\n    player: new Player(),\n\n    // Cached data\n    stats: {\n      level: 1,\n      experience: 0,\n      experienceToNext: 100,\n      reputation: 0,\n      energy: 100,\n      maxEnergy: 100,\n      money: 0\n    },\n    skills: {\n      technicalMapping: 1,\n      artisticVision: 1,\n      equipmentMastery: 1,\n      socialMedia: 1,\n      collaboration: 1\n    },\n    equipment: {\n      projector: null,\n      computer: 'basic-laptop',\n      controller: null,\n      software: ['basic-vj-software'],\n      accessories: []\n    },\n    position: { x: 0, y: 0, scene: 'home' },\n    inventory: new Map(),\n    achievements: new Set(),\n    unlockedContent: new Set(),\n\n    // Systems\n    skillSystem: SkillSystem.getInstance(),\n    equipmentSystem: EquipmentSystem.getInstance(),\n    achievementSystem: AchievementSystem.getInstance(),\n\n    // Save system\n    autoSaveEnabled: true,\n    lastSaveTime: 0,\n    saveSlots: Array(5).fill(null),\n\n    // Session tracking\n    sessionStartTime: Date.now(),\n    totalPlaytime: 0,\n\n    // Actions\n    initializePlayer: () => {\n      const state = get();\n\n      // Try to load from auto-save if available\n      const autoSave = localStorage.getItem('vj-game-autosave');\n      if (autoSave) {\n        try {\n          state.player.deserialize(autoSave);\n        } catch (error) {\n          console.warn('Failed to load auto-save, starting fresh:', error);\n        }\n      }\n\n      // Refresh cached data\n      get().refreshPlayerData();\n\n      // Start session tracking\n      get().startSession();\n\n      // Set up auto-save interval\n      if (state.autoSaveEnabled) {\n        setInterval(() => {\n          get().saveGame(); // Auto-save to slot 0 (auto-save slot)\n        }, 30000); // Auto-save every 30 seconds\n      }\n    },\n\n    refreshPlayerData: () => {\n      const { player } = get();\n\n      set({\n        stats: player.getStats(),\n        skills: player.getSkills(),\n        equipment: player.getEquipment(),\n        position: player.getPosition(),\n        inventory: player.getInventory(),\n        achievements: player.getAchievements(),\n        unlockedContent: player.getUnlockedContent()\n      });\n    },\n\n    // Stat actions\n    addExperience: (amount: number) => {\n      const { player } = get();\n      const result = player.addExperience(amount);\n      get().refreshPlayerData();\n\n      // Check for achievements after gaining experience\n      get().checkAchievements();\n\n      return result;\n    },\n\n    addReputation: (amount: number) => {\n      const { player } = get();\n      player.addReputation(amount);\n      get().refreshPlayerData();\n\n      // Check for achievements after gaining reputation\n      get().checkAchievements();\n    },\n\n    addMoney: (amount: number) => {\n      const { player } = get();\n      player.addMoney(amount);\n      get().refreshPlayerData();\n\n      // Check for achievements after gaining money\n      get().checkAchievements();\n    },\n\n    spendMoney: (amount: number) => {\n      const { player } = get();\n      const result = player.spendMoney(amount);\n      if (result) {\n        get().refreshPlayerData();\n      }\n      return result;\n    },\n\n    consumeEnergy: (amount: number) => {\n      const { player } = get();\n      const result = player.consumeEnergy(amount);\n      get().refreshPlayerData();\n      return result;\n    },\n\n    restoreEnergy: (amount: number) => {\n      const { player } = get();\n      player.restoreEnergy(amount);\n      get().refreshPlayerData();\n    },\n\n    // Skill actions\n    upgradeSkill: (skill: keyof PlayerSkills) => {\n      const { skillSystem, player } = get();\n      const result = skillSystem.upgradeSkill(player, skill);\n\n      if (result) {\n        get().refreshPlayerData();\n        get().checkAchievements();\n      }\n\n      return result;\n    },\n\n    canUpgradeSkill: (skill: keyof PlayerSkills) => {\n      const { skillSystem, player } = get();\n      return skillSystem.canUpgradeSkill(player, skill);\n    },\n\n    getSkillProgress: () => {\n      const { skillSystem, player } = get();\n      return skillSystem.getSkillProgress(player);\n    },\n\n    // Equipment actions\n    equipItem: (slot, itemId) => {\n      const { player } = get();\n      const result = player.equipItem(slot, itemId);\n\n      if (result) {\n        get().refreshPlayerData();\n      }\n\n      return result;\n    },\n\n    unequipItem: (slot) => {\n      const { player } = get();\n      const result = player.unequipItem(slot);\n\n      if (result) {\n        get().refreshPlayerData();\n      }\n\n      return result;\n    },\n\n    purchaseEquipment: (equipmentId: string) => {\n      const { equipmentSystem, player } = get();\n      const result = equipmentSystem.purchaseEquipment(player, equipmentId);\n\n      if (result) {\n        get().refreshPlayerData();\n        get().checkAchievements();\n      }\n\n      return result;\n    },\n\n    getAvailableEquipment: () => {\n      const { equipmentSystem, player } = get();\n      return equipmentSystem.getAvailableEquipment(player);\n    },\n\n    // Inventory actions\n    addToInventory: (itemId: string, quantity: number = 1) => {\n      const { player } = get();\n      player.addToInventory(itemId, quantity);\n      get().refreshPlayerData();\n      get().checkAchievements();\n    },\n\n    removeFromInventory: (itemId: string, quantity: number = 1) => {\n      const { player } = get();\n      const result = player.removeFromInventory(itemId, quantity);\n\n      if (result) {\n        get().refreshPlayerData();\n      }\n\n      return result;\n    },\n\n    hasInInventory: (itemId: string, quantity: number = 1) => {\n      const { player } = get();\n      return player.hasInInventory(itemId, quantity);\n    },\n\n    getInventoryCount: (itemId: string) => {\n      const { player } = get();\n      return player.getInventoryCount(itemId);\n    },\n\n    // Position actions\n    setPosition: (x: number, y: number, scene?: string) => {\n      const { player } = get();\n      player.setPosition(x, y, scene);\n      get().refreshPlayerData();\n    },\n\n    moveBy: (dx: number, dy: number) => {\n      const { player } = get();\n      player.moveBy(dx, dy);\n      get().refreshPlayerData();\n    },\n\n    // Achievement actions\n    checkAchievements: () => {\n      const { achievementSystem, player } = get();\n      const newAchievements = achievementSystem.checkAchievements(player);\n\n      if (newAchievements.length > 0) {\n        get().refreshPlayerData();\n\n        // Trigger notifications for new achievements\n        const gameStore = (window as any).gameStore; // Access game store for notifications\n        if (gameStore) {\n          newAchievements.forEach(achievementId => {\n            const achievement = achievementSystem.getAchievement(achievementId);\n            if (achievement) {\n              gameStore.getState().addNotification({\n                type: 'achievement',\n                title: 'Achievement Unlocked!',\n                message: `${achievement.name}: ${achievement.description}`,\n                duration: 8000\n              });\n            }\n          });\n        }\n      }\n\n      return newAchievements;\n    },\n\n    getAchievementStats: () => {\n      const { achievementSystem, player } = get();\n      return achievementSystem.getAchievementStats(player);\n    },\n\n    // Content unlocking\n    unlockContent: (contentId: string) => {\n      const { player } = get();\n      player.unlockContent(contentId);\n      get().refreshPlayerData();\n    },\n\n    hasUnlockedContent: (contentId: string) => {\n      const { player } = get();\n      return player.hasUnlockedContent(contentId);\n    },\n\n    // Save/Load system\n    saveGame: async (slotId: number = 0, name?: string) => {\n      try {\n        const { player, totalPlaytime } = get();\n        get().updatePlaytime();\n\n        const saveData = {\n          playerData: player.serialize(),\n          timestamp: Date.now(),\n          playerLevel: player.getStats().level,\n          location: player.getPosition().scene,\n          playtime: totalPlaytime,\n          name: name || `Save ${slotId}`\n        };\n\n        // Save to localStorage\n        const saveKey = slotId === 0 ? 'vj-game-autosave' : `vj-game-save-${slotId}`;\n        localStorage.setItem(saveKey, JSON.stringify(saveData));\n\n        // Update save slots cache\n        const saveSlots = [...get().saveSlots];\n        saveSlots[slotId] = {\n          id: slotId,\n          name: saveData.name,\n          timestamp: saveData.timestamp,\n          playerLevel: saveData.playerLevel,\n          location: saveData.location,\n          playtime: saveData.playtime\n        };\n\n        set({ saveSlots, lastSaveTime: Date.now() });\n\n        return true;\n      } catch (error) {\n        console.error('Failed to save game:', error);\n        return false;\n      }\n    },\n\n    loadGame: async (slotId: number) => {\n      try {\n        const saveKey = slotId === 0 ? 'vj-game-autosave' : `vj-game-save-${slotId}`;\n        const saveData = localStorage.getItem(saveKey);\n\n        if (!saveData) {\n          throw new Error('Save data not found');\n        }\n\n        const parsed = JSON.parse(saveData);\n        const { player } = get();\n\n        // Load player data\n        player.deserialize(parsed.playerData);\n\n        // Update session data\n        set({\n          totalPlaytime: parsed.playtime || 0,\n          sessionStartTime: Date.now()\n        });\n\n        // Refresh cached data\n        get().refreshPlayerData();\n\n        return true;\n      } catch (error) {\n        console.error('Failed to load game:', error);\n        return false;\n      }\n    },\n\n    deleteSave: (slotId: number) => {\n      try {\n        if (slotId === 0) return false; // Cannot delete auto-save\n\n        const saveKey = `vj-game-save-${slotId}`;\n        localStorage.removeItem(saveKey);\n\n        const saveSlots = [...get().saveSlots];\n        saveSlots[slotId] = null;\n        set({ saveSlots });\n\n        return true;\n      } catch (error) {\n        console.error('Failed to delete save:', error);\n        return false;\n      }\n    },\n\n    getSaveSlots: () => {\n      const slots = [...get().saveSlots];\n\n      // Update slots from localStorage\n      for (let i = 1; i < slots.length; i++) {\n        try {\n          const saveKey = `vj-game-save-${i}`;\n          const saveData = localStorage.getItem(saveKey);\n\n          if (saveData) {\n            const parsed = JSON.parse(saveData);\n            slots[i] = {\n              id: i,\n              name: parsed.name || `Save ${i}`,\n              timestamp: parsed.timestamp,\n              playerLevel: parsed.playerLevel,\n              location: parsed.location,\n              playtime: parsed.playtime || 0\n            };\n          }\n        } catch (error) {\n          console.warn(`Failed to load save slot ${i}:`, error);\n        }\n      }\n\n      return slots;\n    },\n\n    setAutoSave: (enabled: boolean) => {\n      set({ autoSaveEnabled: enabled });\n    },\n\n    // Session management\n    startSession: () => {\n      set({ sessionStartTime: Date.now() });\n    },\n\n    updatePlaytime: () => {\n      const { sessionStartTime, totalPlaytime } = get();\n      const sessionDuration = Math.floor((Date.now() - sessionStartTime) / 1000);\n      set({ totalPlaytime: totalPlaytime + sessionDuration, sessionStartTime: Date.now() });\n    },\n\n    getSessionDuration: () => {\n      const { sessionStartTime } = get();\n      return Math.floor((Date.now() - sessionStartTime) / 1000);\n    },\n\n    // Utility actions\n    resetPlayer: () => {\n      const newPlayer = new Player();\n      set({\n        player: newPlayer,\n        sessionStartTime: Date.now(),\n        totalPlaytime: 0\n      });\n      get().refreshPlayerData();\n    },\n\n    exportPlayerData: () => {\n      const { player } = get();\n      get().updatePlaytime();\n\n      const exportData = {\n        playerData: player.serialize(),\n        totalPlaytime: get().totalPlaytime,\n        exportedAt: Date.now(),\n        version: '1.0'\n      };\n\n      return JSON.stringify(exportData);\n    },\n\n    importPlayerData: (data: string) => {\n      try {\n        const parsed = JSON.parse(data);\n        const { player } = get();\n\n        player.deserialize(parsed.playerData);\n\n        set({\n          totalPlaytime: parsed.totalPlaytime || 0,\n          sessionStartTime: Date.now()\n        });\n\n        get().refreshPlayerData();\n        get().checkAchievements();\n\n        return true;\n      } catch (error) {\n        console.error('Failed to import player data:', error);\n        return false;\n      }\n    }\n  }))\n);\n\n// Selectors for commonly used state slices\nexport const usePlayerStats = () => usePlayerStore(state => ({\n  stats: state.stats,\n  addExperience: state.addExperience,\n  addReputation: state.addReputation,\n  addMoney: state.addMoney,\n  spendMoney: state.spendMoney,\n  consumeEnergy: state.consumeEnergy,\n  restoreEnergy: state.restoreEnergy\n}));\n\nexport const usePlayerSkills = () => usePlayerStore(state => ({\n  skills: state.skills,\n  upgradeSkill: state.upgradeSkill,\n  canUpgradeSkill: state.canUpgradeSkill,\n  getSkillProgress: state.getSkillProgress\n}));\n\nexport const usePlayerEquipment = () => usePlayerStore(state => ({\n  equipment: state.equipment,\n  equipItem: state.equipItem,\n  unequipItem: state.unequipItem,\n  purchaseEquipment: state.purchaseEquipment,\n  getAvailableEquipment: state.getAvailableEquipment\n}));\n\nexport const usePlayerInventory = () => usePlayerStore(state => ({\n  inventory: state.inventory,\n  addToInventory: state.addToInventory,\n  removeFromInventory: state.removeFromInventory,\n  hasInInventory: state.hasInInventory,\n  getInventoryCount: state.getInventoryCount\n}));\n\nexport const usePlayerAchievements = () => usePlayerStore(state => ({\n  achievements: state.achievements,\n  checkAchievements: state.checkAchievements,\n  getAchievementStats: state.getAchievementStats\n}));\n\nexport const usePlayerSaveLoad = () => usePlayerStore(state => ({\n  saveGame: state.saveGame,\n  loadGame: state.loadGame,\n  deleteSave: state.deleteSave,\n  getSaveSlots: state.getSaveSlots,\n  setAutoSave: state.setAutoSave,\n  autoSaveEnabled: state.autoSaveEnabled,\n  lastSaveTime: state.lastSaveTime,\n  exportPlayerData: state.exportPlayerData,\n  importPlayerData: state.importPlayerData\n}));","import { Level } from '../levels/Level';\n\nexport class SceneManager {\n  private gameEngine: any; // Reference to GameEngine\n  private currentScene: Level | null = null;\n  private nextScene: Level | null = null;\n  private isTransitioning: boolean = false;\n  private transitionDuration: number = 1.0; // seconds\n  private transitionTime: number = 0;\n\n  constructor(gameEngine: any) {\n    this.gameEngine = gameEngine;\n  }\n\n  public loadScene(scene: Level): void {\n    if (this.isTransitioning) {\n      console.warn('Scene transition already in progress');\n      return;\n    }\n\n    this.nextScene = scene;\n    this.startTransition();\n  }\n\n  public getCurrentScene(): Level | null {\n    return this.currentScene;\n  }\n\n  private startTransition(): void {\n    this.isTransitioning = true;\n    this.transitionTime = 0;\n\n    // Start fade out of current scene\n    if (this.currentScene) {\n      this.currentScene.onExit();\n    }\n  }\n\n  private completeTransition(): void {\n    // Clean up old scene\n    if (this.currentScene) {\n      this.currentScene.destroy();\n    }\n\n    // Set new scene as current\n    this.currentScene = this.nextScene;\n    this.nextScene = null;\n\n    // Initialize new scene\n    if (this.currentScene) {\n      this.currentScene.onEnter();\n    }\n\n    this.isTransitioning = false;\n    this.transitionTime = 0;\n  }\n\n  public update(deltaTime: number): void {\n    if (this.isTransitioning) {\n      this.transitionTime += deltaTime;\n\n      // Check if transition is complete\n      if (this.transitionTime >= this.transitionDuration) {\n        this.completeTransition();\n      }\n    }\n\n    // Update current scene\n    if (this.currentScene && !this.isTransitioning) {\n      this.currentScene.update(deltaTime);\n    }\n  }\n\n  public render(ctx: CanvasRenderingContext2D): void {\n    if (this.isTransitioning) {\n      this.renderTransition(ctx);\n    } else if (this.currentScene) {\n      this.currentScene.render(ctx);\n    }\n  }\n\n  private renderTransition(ctx: CanvasRenderingContext2D): void {\n    const progress = Math.min(this.transitionTime / this.transitionDuration, 1);\n    const alpha = Math.sin(progress * Math.PI); // Smooth fade\n\n    // Render current scene (fading out)\n    if (this.currentScene) {\n      ctx.globalAlpha = 1 - (progress * 0.5);\n      this.currentScene.render(ctx);\n    }\n\n    // Render next scene (fading in)\n    if (this.nextScene && progress > 0.5) {\n      ctx.globalAlpha = (progress - 0.5) * 2;\n      this.nextScene.render(ctx);\n    }\n\n    // Reset alpha\n    ctx.globalAlpha = 1;\n\n    // Render transition overlay\n    this.renderTransitionOverlay(ctx, alpha);\n  }\n\n  private renderTransitionOverlay(ctx: CanvasRenderingContext2D, alpha: number): void {\n    const canvas = ctx.canvas;\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n\n    // Create radial gradient for smooth transition\n    const gradient = ctx.createRadialGradient(\n      centerX, centerY, 0,\n      centerX, centerY, Math.max(canvas.width, canvas.height)\n    );\n\n    gradient.addColorStop(0, `rgba(0, 0, 0, ${alpha * 0.3})`);\n    gradient.addColorStop(1, `rgba(0, 0, 0, ${alpha * 0.1})`);\n\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n\n  // Scene stack management for menus/overlays\n  private sceneStack: Level[] = [];\n\n  public pushScene(scene: Level): void {\n    if (this.currentScene) {\n      this.sceneStack.push(this.currentScene);\n      this.currentScene.onPause();\n    }\n    this.currentScene = scene;\n    scene.onEnter();\n  }\n\n  public popScene(): void {\n    if (this.currentScene) {\n      this.currentScene.onExit();\n      this.currentScene.destroy();\n    }\n\n    if (this.sceneStack.length > 0) {\n      this.currentScene = this.sceneStack.pop()!;\n      this.currentScene.onResume();\n    } else {\n      this.currentScene = null;\n    }\n  }\n\n  public isTransitionInProgress(): boolean {\n    return this.isTransitioning;\n  }\n\n  public getTransitionProgress(): number {\n    if (!this.isTransitioning) return 0;\n    return Math.min(this.transitionTime / this.transitionDuration, 1);\n  }\n\n  // Cleanup\n  public destroy(): void {\n    if (this.currentScene) {\n      this.currentScene.destroy();\n    }\n    if (this.nextScene) {\n      this.nextScene.destroy();\n    }\n\n    // Clean up scene stack\n    this.sceneStack.forEach(scene => scene.destroy());\n    this.sceneStack = [];\n  }\n}","import { SceneManager } from './SceneManager';\nimport { InputManager } from './InputManager';\nimport { AudioManager } from './AudioManager';\nimport { useGameStore } from '../../store/gameStore';\n\nexport class GameEngine {\n  private static instance: GameEngine;\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private sceneManager: SceneManager;\n  private inputManager: InputManager;\n  private audioManager: AudioManager;\n  private lastFrameTime: number = 0;\n  private isRunning: boolean = false;\n  private frameId: number = 0;\n\n  private constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d')!;\n\n    // Initialize managers\n    this.sceneManager = new SceneManager(this);\n    this.inputManager = new InputManager(canvas);\n    this.audioManager = new AudioManager();\n\n    this.setupCanvas();\n  }\n\n  public static getInstance(canvas?: HTMLCanvasElement): GameEngine {\n    if (!GameEngine.instance && canvas) {\n      GameEngine.instance = new GameEngine(canvas);\n    }\n    return GameEngine.instance;\n  }\n\n  private setupCanvas(): void {\n    // Set canvas size and handle high DPI displays\n    const rect = this.canvas.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n\n    this.canvas.width = rect.width * dpr;\n    this.canvas.height = rect.height * dpr;\n    this.canvas.style.width = rect.width + 'px';\n    this.canvas.style.height = rect.height + 'px';\n\n    this.ctx.scale(dpr, dpr);\n\n    // Handle canvas resize\n    window.addEventListener('resize', this.handleResize.bind(this));\n  }\n\n  private handleResize(): void {\n    this.setupCanvas();\n  }\n\n  public start(): void {\n    if (!this.isRunning) {\n      this.isRunning = true;\n      this.lastFrameTime = performance.now();\n      this.gameLoop();\n    }\n  }\n\n  public stop(): void {\n    this.isRunning = false;\n    if (this.frameId) {\n      cancelAnimationFrame(this.frameId);\n    }\n  }\n\n  private gameLoop(): void {\n    if (!this.isRunning) return;\n\n    const currentTime = performance.now();\n    const deltaTime = (currentTime - this.lastFrameTime) / 1000; // Convert to seconds\n    this.lastFrameTime = currentTime;\n\n    // Update\n    this.update(deltaTime);\n\n    // Render\n    this.render();\n\n    // Schedule next frame\n    this.frameId = requestAnimationFrame(() => this.gameLoop());\n  }\n\n  private update(deltaTime: number): void {\n    // Update input\n    this.inputManager.update();\n\n    // Update current scene\n    this.sceneManager.update(deltaTime);\n\n    // Update audio\n    this.audioManager.update();\n  }\n\n  private render(): void {\n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Render current scene\n    this.sceneManager.render(this.ctx);\n  }\n\n  // Getters for managers\n  public getSceneManager(): SceneManager {\n    return this.sceneManager;\n  }\n\n  public getInputManager(): InputManager {\n    return this.inputManager;\n  }\n\n  public getAudioManager(): AudioManager {\n    return this.audioManager;\n  }\n\n  public getCanvas(): HTMLCanvasElement {\n    return this.canvas;\n  }\n\n  public getContext(): CanvasRenderingContext2D {\n    return this.ctx;\n  }\n\n  // Game state management\n  public pause(): void {\n    useGameStore.getState().setPaused(true);\n  }\n\n  public resume(): void {\n    useGameStore.getState().setPaused(false);\n  }\n\n  public isPaused(): boolean {\n    return useGameStore.getState().isPaused;\n  }\n\n  // Cleanup\n  public destroy(): void {\n    this.stop();\n    window.removeEventListener('resize', this.handleResize.bind(this));\n    this.inputManager.destroy();\n    this.audioManager.destroy();\n    GameEngine.instance = null as any;\n  }\n}","import { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { GameEngine } from '../game/engine/GameEngine';\n\nexport interface GameState {\n  // Game engine state\n  isInitialized: boolean;\n  isRunning: boolean;\n  isPaused: boolean;\n  currentScene: string | null;\n\n  // UI state\n  showHUD: boolean;\n  showMenu: boolean;\n  showInventory: boolean;\n  showSkillTree: boolean;\n  showAchievements: boolean;\n  showSettings: boolean;\n\n  // Dialog system\n  currentDialog: {\n    character: string;\n    text: string;\n    options?: { text: string; action: string }[];\n  } | null;\n\n  // Notification system\n  notifications: Array<{\n    id: string;\n    type: 'info' | 'success' | 'warning' | 'error' | 'achievement';\n    title: string;\n    message: string;\n    duration?: number;\n    timestamp: number;\n  }>;\n\n  // Loading state\n  loading: {\n    isLoading: boolean;\n    loadingText: string;\n    progress: number;\n  };\n\n  // VJ Career Game state\n  vjCareerGame: {\n    isActive: boolean;\n    player: {\n      level: number;\n      experience: number;\n      money: number;\n      reputation: number;\n    } | null;\n    scene: {\n      venue: string | null;\n      isPerforming: boolean;\n    } | null;\n  };\n\n  // Game settings\n  settings: {\n    graphics: {\n      quality: 'low' | 'medium' | 'high';\n      showParticles: boolean;\n      showAnimations: boolean;\n    };\n    audio: {\n      masterVolume: number;\n      musicVolume: number;\n      sfxVolume: number;\n      muted: boolean;\n    };\n    controls: {\n      keyboardControls: { [action: string]: string };\n      mouseControls: boolean;\n      touchControls: boolean;\n    };\n    accessibility: {\n      colorBlindMode: boolean;\n      highContrast: boolean;\n      reducedMotion: boolean;\n      textSize: 'small' | 'medium' | 'large';\n    };\n  };\n\n  // Actions\n  initializeGame: (canvas: HTMLCanvasElement) => Promise<void>;\n  startGame: () => void;\n  pauseGame: () => void;\n  resumeGame: () => void;\n  stopGame: () => void;\n\n  // Scene management\n  setCurrentScene: (sceneName: string) => void;\n\n  // UI actions\n  toggleHUD: () => void;\n  showMenuModal: () => void;\n  hideMenuModal: () => void;\n  showInventoryModal: () => void;\n  hideInventoryModal: () => void;\n  showSkillTreeModal: () => void;\n  hideSkillTreeModal: () => void;\n  showAchievementsModal: () => void;\n  hideAchievementsModal: () => void;\n  showSettingsModal: () => void;\n  hideSettingsModal: () => void;\n\n  // Dialog system actions\n  showDialog: (character: string, text: string, options?: { text: string; action: string }[]) => void;\n  hideDialog: () => void;\n\n  // Notification system actions\n  addNotification: (notification: Omit<GameState['notifications'][0], 'id' | 'timestamp'>) => void;\n  removeNotification: (id: string) => void;\n  clearNotifications: () => void;\n\n  // Loading actions\n  setLoading: (isLoading: boolean, text?: string, progress?: number) => void;\n\n  // VJ Career Game actions\n  startNewGame: () => void;\n  addExperience: (amount: number) => void;\n  addMoney: (amount: number) => void;\n  setVenue: (venue: string) => void;\n  setPerforming: (performing: boolean) => void;\n\n  // Settings actions\n  updateGraphicsSettings: (settings: Partial<GameState['settings']['graphics']>) => void;\n  updateAudioSettings: (settings: Partial<GameState['settings']['audio']>) => void;\n  updateControlSettings: (settings: Partial<GameState['settings']['controls']>) => void;\n  updateAccessibilitySettings: (settings: Partial<GameState['settings']['accessibility']>) => void;\n\n  // Save/load settings\n  saveSettings: () => void;\n  loadSettings: () => void;\n}\n\nexport const useGameStore = create<GameState>()(\n  subscribeWithSelector((set, get) => ({\n    // Initial state\n    isInitialized: false,\n    isRunning: false,\n    isPaused: false,\n    currentScene: null,\n\n    showHUD: true,\n    showMenu: false,\n    showInventory: false,\n    showSkillTree: false,\n    showAchievements: false,\n    showSettings: false,\n\n    currentDialog: null,\n\n    notifications: [],\n\n    loading: {\n      isLoading: false,\n      loadingText: '',\n      progress: 0\n    },\n\n    vjCareerGame: {\n      isActive: false,\n      player: null,\n      scene: null\n    },\n\n    settings: {\n      graphics: {\n        quality: 'medium',\n        showParticles: true,\n        showAnimations: true\n      },\n      audio: {\n        masterVolume: 0.7,\n        musicVolume: 0.5,\n        sfxVolume: 0.8,\n        muted: false\n      },\n      controls: {\n        keyboardControls: {\n          moveUp: 'KeyW',\n          moveDown: 'KeyS',\n          moveLeft: 'KeyA',\n          moveRight: 'KeyD',\n          interact: 'KeyE',\n          menu: 'Escape',\n          inventory: 'KeyI',\n          skills: 'KeyK'\n        },\n        mouseControls: true,\n        touchControls: true\n      },\n      accessibility: {\n        colorBlindMode: false,\n        highContrast: false,\n        reducedMotion: false,\n        textSize: 'medium'\n      }\n    },\n\n    // Game engine actions\n    initializeGame: async (canvas: HTMLCanvasElement) => {\n      set({ loading: { isLoading: true, loadingText: 'Initializing game engine...', progress: 0 } });\n\n      try {\n        // Initialize game engine\n        const gameEngine = GameEngine.getInstance(canvas);\n\n        set({ loading: { isLoading: true, loadingText: 'Loading assets...', progress: 25 } });\n\n        // Initialize audio manager and preload sounds\n        const audioManager = gameEngine.getAudioManager();\n        await audioManager.preloadGameAudio();\n\n        set({ loading: { isLoading: true, loadingText: 'Setting up game systems...', progress: 50 } });\n\n        // Load settings\n        get().loadSettings();\n\n        set({ loading: { isLoading: true, loadingText: 'Finalizing...', progress: 75 } });\n\n        // Mark as initialized\n        set({\n          isInitialized: true,\n          loading: { isLoading: true, loadingText: 'Ready!', progress: 100 }\n        });\n\n        // Hide loading after a short delay\n        setTimeout(() => {\n          set({ loading: { isLoading: false, loadingText: '', progress: 0 } });\n        }, 500);\n\n      } catch (error) {\n        console.error('Failed to initialize game:', error);\n        set({\n          loading: { isLoading: false, loadingText: '', progress: 0 },\n          notifications: [...get().notifications, {\n            id: Date.now().toString(),\n            type: 'error',\n            title: 'Initialization Error',\n            message: 'Failed to initialize game engine',\n            timestamp: Date.now()\n          }]\n        });\n      }\n    },\n\n    startGame: () => {\n      const gameEngine = GameEngine.getInstance();\n      if (gameEngine) {\n        gameEngine.start();\n        set({ isRunning: true, isPaused: false });\n      }\n    },\n\n    pauseGame: () => {\n      const gameEngine = GameEngine.getInstance();\n      if (gameEngine) {\n        gameEngine.pause();\n        set({ isPaused: true });\n      }\n    },\n\n    resumeGame: () => {\n      const gameEngine = GameEngine.getInstance();\n      if (gameEngine) {\n        gameEngine.resume();\n        set({ isPaused: false });\n      }\n    },\n\n    stopGame: () => {\n      const gameEngine = GameEngine.getInstance();\n      if (gameEngine) {\n        gameEngine.stop();\n        set({ isRunning: false, isPaused: false });\n      }\n    },\n\n    // Scene management\n    setCurrentScene: (sceneName: string) => {\n      set({ currentScene: sceneName });\n    },\n\n    // UI actions\n    toggleHUD: () => set(state => ({ showHUD: !state.showHUD })),\n\n    showMenuModal: () => {\n      get().pauseGame();\n      set({ showMenu: true });\n    },\n\n    hideMenuModal: () => {\n      set({ showMenu: false });\n      get().resumeGame();\n    },\n\n    showInventoryModal: () => set({ showInventory: true }),\n    hideInventoryModal: () => set({ showInventory: false }),\n\n    showSkillTreeModal: () => set({ showSkillTree: true }),\n    hideSkillTreeModal: () => set({ showSkillTree: false }),\n\n    showAchievementsModal: () => set({ showAchievements: true }),\n    hideAchievementsModal: () => set({ showAchievements: false }),\n\n    showSettingsModal: () => set({ showSettings: true }),\n    hideSettingsModal: () => set({ showSettings: false }),\n\n    // Dialog system\n    showDialog: (character: string, text: string, options?: { text: string; action: string }[]) => {\n      get().pauseGame();\n      set({ currentDialog: { character, text, options } });\n    },\n\n    hideDialog: () => {\n      set({ currentDialog: null });\n      get().resumeGame();\n    },\n\n    // Notifications\n    addNotification: (notification) => {\n      const id = Date.now().toString();\n      const timestamp = Date.now();\n\n      set(state => ({\n        notifications: [...state.notifications, { ...notification, id, timestamp }]\n      }));\n\n      // Auto-remove notification after duration\n      if (notification.duration !== 0) {\n        const duration = notification.duration || 5000;\n        setTimeout(() => {\n          get().removeNotification(id);\n        }, duration);\n      }\n    },\n\n    removeNotification: (id: string) => {\n      set(state => ({\n        notifications: state.notifications.filter(n => n.id !== id)\n      }));\n    },\n\n    clearNotifications: () => set({ notifications: [] }),\n\n    // Loading\n    setLoading: (isLoading: boolean, text: string = '', progress: number = 0) => {\n      set({\n        loading: {\n          isLoading,\n          loadingText: text,\n          progress: Math.max(0, Math.min(100, progress))\n        }\n      });\n    },\n\n    // VJ Career Game actions\n    startNewGame: () => {\n      set({\n        vjCareerGame: {\n          isActive: true,\n          player: {\n            level: 1,\n            experience: 0,\n            money: 0,\n            reputation: 0\n          },\n          scene: {\n            venue: null,\n            isPerforming: false\n          }\n        }\n      });\n    },\n\n    addExperience: (amount: number) => {\n      set(state => {\n        if (!state.vjCareerGame.player) return state;\n\n        const newExperience = state.vjCareerGame.player.experience + amount;\n        const newLevel = Math.floor(newExperience / 100) + 1;\n\n        return {\n          vjCareerGame: {\n            ...state.vjCareerGame,\n            player: {\n              ...state.vjCareerGame.player,\n              experience: newExperience,\n              level: newLevel\n            }\n          }\n        };\n      });\n    },\n\n    addMoney: (amount: number) => {\n      set(state => {\n        if (!state.vjCareerGame.player) return state;\n\n        return {\n          vjCareerGame: {\n            ...state.vjCareerGame,\n            player: {\n              ...state.vjCareerGame.player,\n              money: state.vjCareerGame.player.money + amount\n            }\n          }\n        };\n      });\n    },\n\n    setVenue: (venue: string) => {\n      set(state => ({\n        vjCareerGame: {\n          ...state.vjCareerGame,\n          scene: state.vjCareerGame.scene ? {\n            ...state.vjCareerGame.scene,\n            venue\n          } : {\n            venue,\n            isPerforming: false\n          }\n        }\n      }));\n    },\n\n    setPerforming: (performing: boolean) => {\n      set(state => ({\n        vjCareerGame: {\n          ...state.vjCareerGame,\n          scene: state.vjCareerGame.scene ? {\n            ...state.vjCareerGame.scene,\n            isPerforming: performing\n          } : {\n            venue: null,\n            isPerforming: performing\n          }\n        }\n      }));\n    },\n\n    // Settings\n    updateGraphicsSettings: (newSettings) => {\n      set(state => ({\n        settings: {\n          ...state.settings,\n          graphics: { ...state.settings.graphics, ...newSettings }\n        }\n      }));\n      get().saveSettings();\n    },\n\n    updateAudioSettings: (newSettings) => {\n      set(state => ({\n        settings: {\n          ...state.settings,\n          audio: { ...state.settings.audio, ...newSettings }\n        }\n      }));\n\n      // Apply audio settings to audio manager\n      const gameEngine = GameEngine.getInstance();\n      if (gameEngine) {\n        const audioManager = gameEngine.getAudioManager();\n        if (newSettings.masterVolume !== undefined) {\n          audioManager.setVolume('masterVolume', newSettings.masterVolume);\n        }\n        if (newSettings.musicVolume !== undefined) {\n          audioManager.setVolume('musicVolume', newSettings.musicVolume);\n        }\n        if (newSettings.sfxVolume !== undefined) {\n          audioManager.setVolume('sfxVolume', newSettings.sfxVolume);\n        }\n        if (newSettings.muted !== undefined) {\n          if (newSettings.muted) {\n            audioManager.toggleMute();\n          }\n        }\n      }\n\n      get().saveSettings();\n    },\n\n    updateControlSettings: (newSettings) => {\n      set(state => ({\n        settings: {\n          ...state.settings,\n          controls: { ...state.settings.controls, ...newSettings }\n        }\n      }));\n      get().saveSettings();\n    },\n\n    updateAccessibilitySettings: (newSettings) => {\n      set(state => ({\n        settings: {\n          ...state.settings,\n          accessibility: { ...state.settings.accessibility, ...newSettings }\n        }\n      }));\n      get().saveSettings();\n    },\n\n    // Persistence\n    saveSettings: () => {\n      try {\n        localStorage.setItem('vj-game-settings', JSON.stringify(get().settings));\n      } catch (error) {\n        console.warn('Failed to save settings:', error);\n      }\n    },\n\n    loadSettings: () => {\n      try {\n        const stored = localStorage.getItem('vj-game-settings');\n        if (stored) {\n          const settings = JSON.parse(stored);\n          set(state => ({ settings: { ...state.settings, ...settings } }));\n        }\n      } catch (error) {\n        console.warn('Failed to load settings:', error);\n      }\n    }\n  }))\n);\n\n// Selectors for commonly used state slices\nexport const useGameEngine = () => useGameStore(state => ({\n  isInitialized: state.isInitialized,\n  isRunning: state.isRunning,\n  isPaused: state.isPaused,\n  startGame: state.startGame,\n  pauseGame: state.pauseGame,\n  resumeGame: state.resumeGame,\n  stopGame: state.stopGame\n}));\n\nexport const useGameUI = () => useGameStore(state => ({\n  showHUD: state.showHUD,\n  showMenu: state.showMenu,\n  showInventory: state.showInventory,\n  showSkillTree: state.showSkillTree,\n  showAchievements: state.showAchievements,\n  showSettings: state.showSettings,\n  toggleHUD: state.toggleHUD,\n  showMenuModal: state.showMenuModal,\n  hideMenuModal: state.hideMenuModal,\n  showInventoryModal: state.showInventoryModal,\n  hideInventoryModal: state.hideInventoryModal,\n  showSkillTreeModal: state.showSkillTreeModal,\n  hideSkillTreeModal: state.hideSkillTreeModal,\n  showAchievementsModal: state.showAchievementsModal,\n  hideAchievementsModal: state.hideAchievementsModal,\n  showSettingsModal: state.showSettingsModal,\n  hideSettingsModal: state.hideSettingsModal\n}));\n\nexport const useGameDialog = () => useGameStore(state => ({\n  currentDialog: state.currentDialog,\n  showDialog: state.showDialog,\n  hideDialog: state.hideDialog\n}));\n\nexport const useGameNotifications = () => useGameStore(state => ({\n  notifications: state.notifications,\n  addNotification: state.addNotification,\n  removeNotification: state.removeNotification,\n  clearNotifications: state.clearNotifications\n}));\n\nexport const useGameSettings = () => useGameStore(state => ({\n  settings: state.settings,\n  updateGraphicsSettings: state.updateGraphicsSettings,\n  updateAudioSettings: state.updateAudioSettings,\n  updateControlSettings: state.updateControlSettings,\n  updateAccessibilitySettings: state.updateAccessibilitySettings\n}));\n\nexport const useVJCareerGame = () => useGameStore(state => ({\n  vjCareerGame: state.vjCareerGame,\n  startNewGame: state.startNewGame,\n  addExperience: state.addExperience,\n  addMoney: state.addMoney,\n  setVenue: state.setVenue,\n  setPerforming: state.setPerforming\n}));","import { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\n// Metatron's Cube Component\nexport function MetatronsCube({ scale = 1, color = '#8b5cf6', emissiveIntensity = 0.5 }) {\n  const groupRef = useRef<THREE.Group>(null!);\n  const linesRef = useRef<THREE.Group>(null!);\n\n  // Create the 13 spheres of Metatron's Cube\n  const spherePositions = useMemo(() => {\n    const positions: [number, number, number][] = [];\n\n    // Center sphere\n    positions.push([0, 0, 0]);\n\n    // Inner hexagon (6 spheres)\n    for (let i = 0; i < 6; i++) {\n      const angle = (i / 6) * Math.PI * 2;\n      positions.push([\n        Math.cos(angle) * scale,\n        Math.sin(angle) * scale,\n        0\n      ]);\n    }\n\n    // Outer hexagon (6 spheres)\n    for (let i = 0; i < 6; i++) {\n      const angle = (i / 6) * Math.PI * 2 + Math.PI / 6;\n      positions.push([\n        Math.cos(angle) * scale * 1.7,\n        Math.sin(angle) * scale * 1.7,\n        0\n      ]);\n    }\n\n    return positions;\n  }, [scale]);\n\n  // Create the lines connecting all spheres\n  const lines = useMemo(() => {\n    const lineGeometry = new THREE.BufferGeometry();\n    const points: number[] = [];\n\n    // Connect all spheres to each other\n    for (let i = 0; i < spherePositions.length; i++) {\n      for (let j = i + 1; j < spherePositions.length; j++) {\n        points.push(\n          spherePositions[i][0], spherePositions[i][1], spherePositions[i][2],\n          spherePositions[j][0], spherePositions[j][1], spherePositions[j][2]\n        );\n      }\n    }\n\n    lineGeometry.setAttribute('position', new THREE.Float32BufferAttribute(points, 3));\n    return lineGeometry;\n  }, [spherePositions]);\n\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.x = state.clock.elapsedTime * 0.1;\n      groupRef.current.rotation.y = state.clock.elapsedTime * 0.15;\n      groupRef.current.rotation.z = state.clock.elapsedTime * 0.05;\n    }\n    if (linesRef.current) {\n      linesRef.current.rotation.z = -state.clock.elapsedTime * 0.1;\n    }\n  });\n\n  return (\n    <group ref={groupRef}>\n      {/* Spheres at vertices */}\n      {spherePositions.map((pos, i) => (\n        <mesh key={i} position={pos}>\n          <sphereGeometry args={[0.1 * scale, 32, 32]} />\n          <meshPhysicalMaterial\n            color={color}\n            metalness={1}\n            roughness={0}\n            emissive={color}\n            emissiveIntensity={emissiveIntensity}\n          />\n        </mesh>\n      ))}\n\n      {/* Connecting lines */}\n      <group ref={linesRef}>\n        <lineSegments geometry={lines}>\n          <lineBasicMaterial\n            color={color}\n            transparent\n            opacity={0.3}\n            linewidth={1}\n          />\n        </lineSegments>\n      </group>\n    </group>\n  );\n}\n\n// Flower of Life Component\nexport function FlowerOfLife({ scale = 1, color = '#ec4899' }) {\n  const groupRef = useRef<THREE.Group>(null!);\n\n  const circles = useMemo(() => {\n    const circlePositions: [number, number, number][] = [];\n\n    // Center circle\n    circlePositions.push([0, 0, 0]);\n\n    // 6 surrounding circles\n    for (let i = 0; i < 6; i++) {\n      const angle = (i / 6) * Math.PI * 2;\n      circlePositions.push([\n        Math.cos(angle) * scale,\n        Math.sin(angle) * scale,\n        0\n      ]);\n    }\n\n    // 6 outer circles\n    for (let i = 0; i < 6; i++) {\n      const angle = (i / 6) * Math.PI * 2 + Math.PI / 6;\n      circlePositions.push([\n        Math.cos(angle) * scale * 1.73,\n        Math.sin(angle) * scale * 1.73,\n        0\n      ]);\n    }\n\n    return circlePositions;\n  }, [scale]);\n\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.z = state.clock.elapsedTime * 0.1;\n      groupRef.current.scale.x = 1 + Math.sin(state.clock.elapsedTime) * 0.1;\n      groupRef.current.scale.y = 1 + Math.sin(state.clock.elapsedTime) * 0.1;\n    }\n  });\n\n  return (\n    <group ref={groupRef}>\n      {circles.map((pos, i) => (\n        <mesh key={i} position={pos}>\n          <torusGeometry args={[scale * 0.5, 0.02, 8, 64]} />\n          <meshPhysicalMaterial\n            color={color}\n            metalness={1}\n            roughness={0}\n            emissive={color}\n            emissiveIntensity={0.3}\n            transparent\n            opacity={0.8}\n          />\n        </mesh>\n      ))}\n    </group>\n  );\n}\n\n// Merkaba (Star Tetrahedron) Component\nexport function Merkaba({ scale = 1, color = '#10b981' }) {\n  const groupRef = useRef<THREE.Group>(null!);\n  const innerRef = useRef<THREE.Mesh>(null!);\n\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.y = state.clock.elapsedTime * 0.3;\n    }\n    if (innerRef.current) {\n      innerRef.current.rotation.y = -state.clock.elapsedTime * 0.5;\n      innerRef.current.rotation.x = state.clock.elapsedTime * 0.2;\n    }\n  });\n\n  return (\n    <group ref={groupRef} scale={scale}>\n      {/* Upward pointing tetrahedron */}\n      <mesh>\n        <tetrahedronGeometry args={[2, 0]} />\n        <meshPhysicalMaterial\n          color={color}\n          metalness={0.9}\n          roughness={0.1}\n          transparent\n          opacity={0.7}\n          emissive={color}\n          emissiveIntensity={0.3}\n          side={THREE.DoubleSide}\n        />\n      </mesh>\n\n      {/* Downward pointing tetrahedron */}\n      <mesh ref={innerRef} rotation={[Math.PI, 0, 0]}>\n        <tetrahedronGeometry args={[2, 0]} />\n        <meshPhysicalMaterial\n          color={color}\n          metalness={0.9}\n          roughness={0.1}\n          transparent\n          opacity={0.7}\n          emissive={color}\n          emissiveIntensity={0.3}\n          side={THREE.DoubleSide}\n        />\n      </mesh>\n    </group>\n  );\n}\n\n// Platonic Solids Collection\nexport function PlatonicSolids({ position = [0, 0, 0] }) {\n  const groupRef = useRef<THREE.Group>(null!);\n\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.y = state.clock.elapsedTime * 0.1;\n    }\n  });\n\n  const solids = [\n    { geometry: 'tetrahedron', position: [-3, 0, 0] as [number, number, number], color: '#ff0000' },\n    { geometry: 'octahedron', position: [-1.5, 0, 0] as [number, number, number], color: '#00ff00' },\n    { geometry: 'icosahedron', position: [0, 0, 0] as [number, number, number], color: '#0000ff' },\n    { geometry: 'dodecahedron', position: [1.5, 0, 0] as [number, number, number], color: '#ffff00' },\n    { geometry: 'box', position: [3, 0, 0] as [number, number, number], color: '#ff00ff' }\n  ];\n\n  return (\n    <group ref={groupRef} position={position}>\n      {solids.map((solid, i) => {\n        const GeometryComponent = {\n          tetrahedron: () => <tetrahedronGeometry args={[0.5, 0]} />,\n          octahedron: () => <octahedronGeometry args={[0.5, 0]} />,\n          icosahedron: () => <icosahedronGeometry args={[0.5, 0]} />,\n          dodecahedron: () => <dodecahedronGeometry args={[0.5, 0]} />,\n          box: () => <boxGeometry args={[0.7, 0.7, 0.7]} />\n        }[solid.geometry];\n\n        return (\n          <mesh key={i} position={solid.position}>\n            {GeometryComponent && <GeometryComponent />}\n            <meshPhysicalMaterial\n              color={solid.color}\n              metalness={1}\n              roughness={0}\n              emissive={solid.color}\n              emissiveIntensity={0.5}\n            />\n          </mesh>\n        );\n      })}\n    </group>\n  );\n}\n\n// Sacred Geometry Composite\nexport function SacredGeometryComposite({ scale = 1 }) {\n  const groupRef = useRef<THREE.Group>(null!);\n\n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.1) * 0.1;\n      groupRef.current.rotation.y = state.clock.elapsedTime * 0.05;\n    }\n  });\n\n  return (\n    <group ref={groupRef} scale={scale}>\n      <MetatronsCube scale={2} color=\"#8b5cf6\" emissiveIntensity={0.5} />\n      <FlowerOfLife scale={3} color=\"#ec4899\" />\n      <Merkaba scale={0.8} color=\"#10b981\" />\n    </group>\n  );\n}","import React, { useState, useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Text, Box, Sphere, Float, Sparkles } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { useVJCareerGame } from '../../store/gameStore';\nimport { MetatronsCube } from '../3d/SacredGeometry';\n\n// Venue Component\nfunction Venue3D({ position, name, difficulty, onSelect, isActive }: any) {\n  const meshRef = useRef<THREE.Mesh>(null!);\n\n  useFrame((state) => {\n    if (meshRef.current && isActive) {\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.5;\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 2) * 0.1;\n    }\n  });\n\n  const colors = {\n    'Basement Club': '#10b981',\n    'Warehouse Party': '#3b82f6',\n    'Music Festival': '#ec4899',\n    'Red Rocks': '#f59e0b',\n    'Madison Square Garden': '#8b5cf6'\n  };\n\n  return (\n    <Float speed={2} rotationIntensity={0.3} floatIntensity={0.5}>\n      <group position={position}>\n        <Box\n          ref={meshRef}\n          args={[2, 3, 0.5]}\n          onClick={onSelect}\n        >\n          <meshPhysicalMaterial\n            color={colors[name] || '#ffffff'}\n            metalness={0.9}\n            roughness={0.1}\n            emissive={colors[name] || '#ffffff'}\n            emissiveIntensity={isActive ? 0.5 : 0.2}\n          />\n        </Box>\n        <Text\n          position={[0, 2, 0]}\n          fontSize={0.3}\n          color=\"white\"\n          anchorX=\"center\"\n        >\n          {name}\n        </Text>\n        <Text\n          position={[0, 1.5, 0]}\n          fontSize={0.2}\n          color=\"#ffff00\"\n          anchorX=\"center\"\n        >\n          Difficulty: {difficulty}\n        </Text>\n      </group>\n    </Float>\n  );\n}\n\n// Equipment Display\nfunction Equipment3D({ equipment, position }: any) {\n  return (\n    <group position={position}>\n      {equipment.map((item: any, i: number) => (\n        <Float key={i} speed={1 + i * 0.2}>\n          <Box\n            position={[(i - 1) * 1.5, 0, 0]}\n            args={[0.8, 0.8, 0.8]}\n          >\n            <meshPhysicalMaterial\n              color={item.rarity === 'legendary' ? '#ffd700' : item.rarity === 'epic' ? '#8b5cf6' : '#3b82f6'}\n              metalness={1}\n              roughness={0}\n              emissive={item.rarity === 'legendary' ? '#ffd700' : '#8b5cf6'}\n              emissiveIntensity={0.3}\n            />\n          </Box>\n          <Text\n            position={[(i - 1) * 1.5, -0.6, 0]}\n            fontSize={0.15}\n            color=\"white\"\n            anchorX=\"center\"\n          >\n            {item.name}\n          </Text>\n        </Float>\n      ))}\n    </group>\n  );\n}\n\nexport default function VJCareerGame3D({ position }: { position: [number, number, number] }) {\n  const { vjCareerGame, startNewGame, addExperience, addMoney, setVenue, setPerforming } = useVJCareerGame();\n  const { player, scene } = vjCareerGame;\n  const gameActive = vjCareerGame.isActive;\n  const [selectedVenue, setSelectedVenue] = useState<string | null>(null);\n  const [currentPerformance, setCurrentPerformance] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const venues = [\n    { name: 'Basement Club', difficulty: 1, reward: 100, xp: 50 },\n    { name: 'Warehouse Party', difficulty: 2, reward: 250, xp: 100 },\n    { name: 'Music Festival', difficulty: 3, reward: 500, xp: 200 },\n    { name: 'Red Rocks', difficulty: 4, reward: 1000, xp: 400 },\n    { name: 'Madison Square Garden', difficulty: 5, reward: 2500, xp: 800 }\n  ];\n\n  const equipment = [\n    { name: 'Basic Projector', cost: 100, power: 10, rarity: 'common' },\n    { name: 'Pro Projector', cost: 500, power: 25, rarity: 'epic' },\n    { name: 'Laser System', cost: 1500, power: 50, rarity: 'legendary' }\n  ];\n\n  const handleVenueSelect = (venue: any) => {\n    try {\n      setSelectedVenue(venue.name);\n      setVenue(venue.name);\n      setCurrentPerformance(true);\n      setPerforming(true);\n\n      // Simulate completing the venue\n      setTimeout(() => {\n        try {\n          addMoney(venue.reward);\n          addExperience(venue.xp);\n          setSelectedVenue(null);\n          setCurrentPerformance(false);\n          setPerforming(false);\n        } catch (error) {\n          console.error('Error completing venue performance:', error);\n          // Reset state on error\n          setSelectedVenue(null);\n          setCurrentPerformance(false);\n          setPerforming(false);\n        }\n      }, 3000);\n    } catch (error) {\n      console.error('Error selecting venue:', error);\n    }\n  };\n\n  const handleStartGame = () => {\n    try {\n      setIsLoading(true);\n      startNewGame();\n      // Small delay to show loading state\n      setTimeout(() => setIsLoading(false), 500);\n    } catch (error) {\n      console.error('Error starting new game:', error);\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <group position={position}>\n      {/* Main Game Crystal - Metatron's Cube */}\n      <Float speed={0.5} rotationIntensity={0.3} floatIntensity={0.5}>\n        <group onClick={handleStartGame} scale={1.5}>\n          <MetatronsCube\n            scale={2}\n            color={gameActive ? \"#ffd700\" : \"#8b5cf6\"}\n            emissiveIntensity={gameActive ? 0.8 : 0.3}\n          />\n        </group>\n      </Float>\n\n      {!gameActive && !isLoading && (\n        <Text position={[0, 3, 0]} fontSize={0.5} color=\"#8b5cf6\" anchorX=\"center\">\n          CLICK TO START VJ CAREER\n        </Text>\n      )}\n\n      {isLoading && (\n        <Text position={[0, 3, 0]} fontSize={0.5} color=\"#ffd700\" anchorX=\"center\">\n          INITIALIZING CAREER...\n        </Text>\n      )}\n\n      {gameActive && (\n        <>\n          {/* Game Title */}\n          <Text position={[0, 7, 0]} fontSize={0.8} color=\"#8b5cf6\" anchorX=\"center\">\n            VJ CAREER RPG\n          </Text>\n\n          {/* Player Stats */}\n          <group position={[0, 6, 0]}>\n            <Text fontSize={0.3} color=\"white\" anchorX=\"center\">\n              Level {player?.level || 1} VJ • {player?.experience || 0} XP • ${player?.money || 0}\n            </Text>\n            <Text position={[0, -0.5, 0]} fontSize={0.25} color=\"#10b981\" anchorX=\"center\">\n              Reputation: {player?.reputation || 0} • Current Venue: {scene?.venue || 'None'}\n            </Text>\n          </group>\n\n          {/* Venues */}\n          <group position={[0, 2, 0]}>\n            <Text position={[0, 2, 0]} fontSize={0.4} color=\"white\" anchorX=\"center\">\n              SELECT VENUE\n            </Text>\n            {venues.map((venue, i) => {\n              const angle = (i / venues.length) * Math.PI * 2;\n              const radius = 5;\n              return (\n                <Venue3D\n                  key={venue.name}\n                  position={[Math.cos(angle) * radius, 0, Math.sin(angle) * radius]}\n                  name={venue.name}\n                  difficulty={venue.difficulty}\n                  onSelect={() => handleVenueSelect(venue)}\n                  isActive={selectedVenue === venue.name}\n                />\n              );\n            })}\n          </group>\n\n          {/* Equipment Shop */}\n          <group position={[0, -3, 0]}>\n            <Text position={[0, 1, 0]} fontSize={0.3} color=\"yellow\" anchorX=\"center\">\n              EQUIPMENT SHOP\n            </Text>\n            <Equipment3D equipment={equipment} position={[0, 0, 0]} />\n          </group>\n\n          {/* Performance Status */}\n          {currentPerformance && (\n            <group position={[0, -5, 0]}>\n              <Box args={[4, 1, 0.2]}>\n                <meshPhysicalMaterial\n                  color=\"#ffd700\"\n                  emissive=\"#ffd700\"\n                  emissiveIntensity={0.5}\n                  metalness={1}\n                  roughness={0}\n                />\n              </Box>\n              <Text position={[0, 0, 0.2]} fontSize={0.3} color=\"black\" anchorX=\"center\">\n                PERFORMING...\n              </Text>\n            </group>\n          )}\n\n          {/* Active Venue Animation */}\n          {selectedVenue && (\n            <>\n              <Text position={[0, -7, 0]} fontSize={0.5} color=\"#10b981\" anchorX=\"center\">\n                PERFORMING AT {selectedVenue.toUpperCase()}\n              </Text>\n              <Sparkles\n                count={100}\n                scale={15}\n                size={3}\n                speed={2}\n                color=\"#10b981\"\n              />\n            </>\n          )}\n        </>\n      )}\n    </group>\n  );\n}","import { Suspense, useState, useRef, useEffect } from 'react'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport {\n  Loader,\n  ScrollControls,\n  Scroll,\n  Environment,\n  ContactShadows,\n  Stars,\n  Float,\n  Text,\n  Box,\n  Sphere,\n  MeshDistortMaterial,\n  Sparkles\n} from '@react-three/drei'\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three'\nimport { useGameStore } from './store/gameStore'\nimport VJCareerGame3D from './components/game/VJCareerGame3D'\nimport { FlowerOfLife, Merkaba, SacredGeometryComposite } from './components/3d/SacredGeometry'\n\n// Simple placeholder for the old game\nfunction GameWorld({ position }: { position: [number, number, number] }) {\n  const meshRef = useRef<THREE.Mesh>(null!)\n  const playerRef = useRef<THREE.Mesh>(null!)\n  const { vjCareerGame, startNewGame, addExperience, addMoney } = useGameStore()\n  const { player } = vjCareerGame\n  const [gameActive, setGameActive] = useState(false)\n  const [score, setScore] = useState(0)\n  const [projectiles, setProjectiles] = useState<Array<{id: number, pos: [number, number, number]}>>([])\n\n  useFrame((state) => {\n    if (meshRef.current && gameActive) {\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.5\n      meshRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.3) * 0.2\n    }\n\n    // Move player with sine wave\n    if (playerRef.current && gameActive) {\n      playerRef.current.position.x = Math.sin(state.clock.elapsedTime * 2) * 3\n      playerRef.current.position.y = Math.cos(state.clock.elapsedTime * 1.5) * 2\n      playerRef.current.rotation.z = state.clock.elapsedTime * 2\n    }\n\n    // Update projectiles\n    setProjectiles(prev => prev.map(p => ({\n      ...p,\n      pos: [p.pos[0], p.pos[1] + 0.1, p.pos[2]]\n    })).filter(p => p.pos[1] < 10))\n  })\n\n  const handleGameStart = () => {\n    setGameActive(true)\n    startNewGame()\n    setScore(0)\n  }\n\n  const handleTargetClick = () => {\n    if (gameActive) {\n      setScore(prev => prev + 100)\n      addExperience(10)\n      addMoney(5)\n\n      // Launch projectile\n      setProjectiles(prev => [...prev, {\n        id: Date.now(),\n        pos: [Math.random() * 6 - 3, -3, 0]\n      }])\n    }\n  }\n\n  return (\n    <group position={position}>\n      {/* Game Controller Crystal */}\n      <Float speed={2} rotationIntensity={0.5}>\n        <mesh ref={meshRef} onClick={handleGameStart}>\n          <octahedronGeometry args={[2, 0]} />\n          <meshPhysicalMaterial\n            color=\"#10b981\"\n            metalness={0.9}\n            roughness={0.1}\n            emissive=\"#10b981\"\n            emissiveIntensity={gameActive ? 0.8 : 0.2}\n            wireframe={gameActive}\n          />\n        </mesh>\n      </Float>\n\n      {!gameActive && (\n        <Text position={[0, 3, 0]} fontSize={0.5} color=\"#10b981\" anchorX=\"center\">\n          CLICK TO START GAME\n        </Text>\n      )}\n\n      {gameActive && (\n        <>\n          {/* Game UI */}\n          <Text position={[0, 5, 0]} fontSize={0.6} color=\"#10b981\" anchorX=\"center\">\n            PROJECTION MAPPING GAME\n          </Text>\n          <Text position={[0, 4, 0]} fontSize={0.4} color=\"white\" anchorX=\"center\">\n            Score: {score}\n          </Text>\n          <Text position={[0, -4, 0]} fontSize={0.3} color=\"yellow\" anchorX=\"center\">\n            Level {player?.level || 1} • {player?.experience || 0} XP • ${player?.money || 0}\n          </Text>\n\n          {/* Player Avatar */}\n          <mesh ref={playerRef} position={[0, 0, 2]}>\n            <coneGeometry args={[0.5, 1, 8]} />\n            <meshPhysicalMaterial\n              color=\"#ec4899\"\n              metalness={1}\n              roughness={0}\n              emissive=\"#ec4899\"\n              emissiveIntensity={0.5}\n            />\n          </mesh>\n\n          {/* Game Targets */}\n          {[...Array(8)].map((_, i) => {\n            const angle = (i / 8) * Math.PI * 2\n            return (\n              <Float key={i} speed={Math.random() * 3} floatIntensity={2}>\n                <Box\n                  position={[\n                    Math.cos(angle) * 5,\n                    Math.sin(angle) * 2,\n                    0\n                  ]}\n                  args={[0.8, 0.8, 0.8]}\n                  onClick={handleTargetClick}\n                >\n                  <meshPhysicalMaterial\n                    color={new THREE.Color().setHSL(i / 8, 1, 0.5)}\n                    emissive={new THREE.Color().setHSL(i / 8, 1, 0.5)}\n                    emissiveIntensity={0.6}\n                    metalness={0.8}\n                    roughness={0.2}\n                  />\n                </Box>\n              </Float>\n            )\n          })}\n\n          {/* Projectiles */}\n          {projectiles.map(p => (\n            <Sphere key={p.id} position={p.pos} args={[0.2, 16, 16]}>\n              <meshBasicMaterial color=\"#ffff00\" />\n            </Sphere>\n          ))}\n\n          {/* Particle Effects */}\n          <Sparkles\n            count={50}\n            scale={10}\n            size={3}\n            speed={2}\n            color=\"#10b981\"\n          />\n        </>\n      )}\n    </group>\n  )\n}\n\n// Main 3D Scene\nfunction MainScene() {\n\n  return (\n    <>\n      <ambientLight intensity={0.2} />\n      <spotLight position={[20, 20, 20]} angle={0.3} penumbra={1} intensity={2} castShadow />\n      <directionalLight position={[-10, 10, 5]} intensity={0.5} color=\"#8b5cf6\" />\n      <pointLight position={[0, 10, 0]} intensity={1} color=\"#ec4899\" />\n\n      <Environment preset=\"city\" />\n      <Stars radius={200} depth={100} count={8000} factor={4} saturation={0} fade speed={1} />\n      <Sparkles count={200} scale={20} size={2} speed={0.5} color=\"#8b5cf6\" />\n\n      <ScrollControls pages={5} damping={0.15}>\n        <Scroll>\n          {/* Hero Section - Sacred Geometry */}\n          <group position={[0, 0, 0]}>\n            <Float speed={0.5} rotationIntensity={0.2} floatIntensity={1}>\n              <SacredGeometryComposite scale={1.5} />\n            </Float>\n\n            {/* Additional sacred geometry elements */}\n            <Float speed={1} rotationIntensity={0.3} floatIntensity={0.5}>\n              <group position={[5, 2, -3]}>\n                <Merkaba scale={0.5} color=\"#f59e0b\" />\n              </group>\n            </Float>\n\n            <Float speed={1.5} rotationIntensity={0.4} floatIntensity={0.7}>\n              <group position={[-5, -2, -3]}>\n                <FlowerOfLife scale={0.8} color=\"#3b82f6\" />\n              </group>\n            </Float>\n\n            {/* Dynamic orbital system */}\n            {[...Array(40)].map((_, i) => {\n              const angle = (i / 40) * Math.PI * 2\n              const radius = 6 + Math.sin(i * 0.5) * 3\n              const y = Math.sin(i * 0.3) * 4\n              return (\n                <Float key={i} speed={2 + i * 0.1} floatIntensity={1}>\n                  <Sphere\n                    position={[\n                      Math.cos(angle) * radius,\n                      y,\n                      Math.sin(angle) * radius\n                    ]}\n                    args={[0.3 + Math.random() * 0.2, 32, 32]}\n                  >\n                    <MeshDistortMaterial\n                      color={new THREE.Color().setHSL((i / 40) * 0.3 + 0.5, 1, 0.6)}\n                      speed={2}\n                      distort={0.4}\n                      radius={1}\n                      emissive={new THREE.Color().setHSL((i / 40) * 0.3 + 0.5, 1, 0.5)}\n                      emissiveIntensity={0.5}\n                      metalness={0.8}\n                      roughness={0.2}\n                    />\n                  </Sphere>\n                </Float>\n              )\n            })}\n          </group>\n\n          {/* Portfolio Gallery - 3D Cards */}\n          <group position={[0, -10, 0]}>\n            <Text position={[0, 4, 0]} fontSize={1} color=\"white\" anchorX=\"center\">\n              PORTFOLIO\n            </Text>\n            {[\n              { color: '#ec4899', title: 'Urban Projection', pos: [-6, 0, 0] },\n              { color: '#3b82f6', title: 'Festival Mapping', pos: [-2, 0, 0] },\n              { color: '#f59e0b', title: 'Museum Display', pos: [2, 0, 0] },\n              { color: '#10b981', title: 'Concert Visual', pos: [6, 0, 0] },\n            ].map((project, i) => (\n              <Float key={i} speed={1 + i * 0.2} rotationIntensity={0.5}>\n                <group position={project.pos}>\n                  <Box args={[2.5, 3.5, 0.3]}>\n                    <meshPhysicalMaterial\n                      color={project.color}\n                      metalness={0.9}\n                      roughness={0.1}\n                      clearcoat={1}\n                      emissive={project.color}\n                      emissiveIntensity={0.3}\n                    />\n                  </Box>\n                  <Text\n                    position={[0, 0, 0.2]}\n                    fontSize={0.3}\n                    color=\"white\"\n                    anchorX=\"center\"\n                  >\n                    {project.title}\n                  </Text>\n                </group>\n              </Float>\n            ))}\n          </group>\n\n          {/* VJ Career RPG Game */}\n          <VJCareerGame3D position={[0, -20, 0]} />\n\n          {/* Particle Field */}\n          <group position={[0, -30, 0]}>\n            {[...Array(150)].map((_, i) => (\n              <Float key={i} speed={Math.random() * 3} floatIntensity={Math.random() * 2}>\n                <mesh\n                  position={[\n                    (Math.random() - 0.5) * 20,\n                    (Math.random() - 0.5) * 20,\n                    (Math.random() - 0.5) * 20\n                  ]}\n                >\n                  <icosahedronGeometry args={[0.2 + Math.random() * 0.3, 0]} />\n                  <meshPhysicalMaterial\n                    color={new THREE.Color().setHSL(Math.random(), 1, 0.6)}\n                    metalness={1}\n                    roughness={0}\n                    emissive={new THREE.Color().setHSL(Math.random(), 1, 0.5)}\n                    emissiveIntensity={0.5}\n                  />\n                </mesh>\n              </Float>\n            ))}\n          </group>\n\n          {/* Contact Section */}\n          <group position={[0, -40, 0]}>\n            <Float speed={1} rotationIntensity={0.5}>\n              <Box args={[5, 2.5, 0.5]}>\n                <meshPhysicalMaterial\n                  color=\"#ec4899\"\n                  metalness={0.95}\n                  roughness={0.05}\n                  emissive=\"#ec4899\"\n                  emissiveIntensity={0.4}\n                />\n              </Box>\n              <Text\n                position={[0, 0, 0.3]}\n                fontSize={0.6}\n                color=\"white\"\n                anchorX=\"center\"\n              >\n                START A PROJECT\n              </Text>\n            </Float>\n          </group>\n        </Scroll>\n\n        {/* HTML Overlay */}\n        <Scroll html style={{ width: '100%', pointerEvents: 'none' }}>\n          <div style={{\n            height: '100vh',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}>\n            <motion.div\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 1.5, ease: \"easeOut\" }}\n              style={{ textAlign: 'center' }}\n            >\n              <h1 style={{\n                fontSize: 'clamp(4rem, 10vw, 10rem)',\n                fontWeight: 900,\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #feca57 75%, #667eea 100%)',\n                backgroundSize: '200% 200%',\n                WebkitBackgroundClip: 'text',\n                WebkitTextFillColor: 'transparent',\n                animation: 'gradient 5s ease infinite',\n                marginBottom: '1rem',\n                textShadow: '0 0 80px rgba(139, 92, 246, 0.5)'\n              }}>\n                LIGHTBRUSH\n              </h1>\n              <p style={{\n                fontSize: 'clamp(1rem, 3vw, 2rem)',\n                color: 'rgba(255,255,255,0.9)',\n                fontWeight: 300,\n                letterSpacing: '0.2em'\n              }}>\n                IMMERSIVE 3D EXPERIENCES\n              </p>\n            </motion.div>\n          </div>\n\n          {/* Spacers for scroll sections */}\n          <div style={{ height: '100vh' }} />\n          <div style={{ height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n            <div style={{ textAlign: 'center', pointerEvents: 'auto' }}>\n              <h2 style={{\n                color: '#8b5cf6',\n                fontSize: '4rem',\n                textShadow: '0 0 30px rgba(139, 92, 246, 0.8)',\n                animation: 'pulse 2s infinite'\n              }}>\n                🎮 VJ CAREER RPG\n              </h2>\n              <p style={{ color: 'white', fontSize: '1.5rem', marginBottom: '1rem' }}>\n                Start your journey as a projection mapping VJ!\n              </p>\n              <p style={{ color: '#8b5cf6', fontSize: '1.2rem' }}>\n                Click the purple crystal to begin your career\n              </p>\n              <div style={{\n                marginTop: '2rem',\n                padding: '1rem',\n                background: 'rgba(139, 92, 246, 0.1)',\n                borderRadius: '10px',\n                border: '2px solid #8b5cf6'\n              }}>\n                <p style={{ color: 'white', fontSize: '1rem', marginBottom: '0.5rem' }}>\n                  🏛️ Perform at legendary venues from basement clubs to Madison Square Garden\n                </p>\n                <p style={{ color: 'white', fontSize: '1rem', marginBottom: '0.5rem' }}>\n                  🎨 Purchase and upgrade projection equipment\n                </p>\n                <p style={{ color: 'white', fontSize: '1rem' }}>\n                  ⭐ Build your reputation in the VJ community\n                </p>\n              </div>\n            </div>\n          </div>\n          <div style={{ height: '100vh' }} />\n          <div style={{ height: '100vh' }} />\n        </Scroll>\n      </ScrollControls>\n\n      <ContactShadows\n        position={[0, -5, 0]}\n        opacity={0.5}\n        scale={40}\n        blur={2}\n        color=\"#8b5cf6\"\n      />\n    </>\n  )\n}\n\n// Main App Component - Full 3D Experience\nfunction App() {\n  return (\n    <>\n      <style>{`\n        @keyframes gradient {\n          0% { background-position: 0% 50%; }\n          50% { background-position: 100% 50%; }\n          100% { background-position: 0% 50%; }\n        }\n        @keyframes pulse {\n          0%, 100% { transform: scale(1); }\n          50% { transform: scale(1.05); }\n        }\n        body {\n          margin: 0;\n          padding: 0;\n          overflow: hidden;\n        }\n        * {\n          cursor: crosshair;\n        }\n      `}</style>\n\n      <div style={{\n        width: '100vw',\n        height: '100vh',\n        background: 'radial-gradient(ellipse at center, #1a0033 0%, #000000 100%)',\n        position: 'fixed',\n        top: 0,\n        left: 0\n      }}>\n        <Canvas\n          shadows\n          dpr={[1, 2]}\n          camera={{ position: [0, 2, 10], fov: 50 }}\n        >\n          <Suspense fallback={null}>\n            <MainScene />\n          </Suspense>\n        </Canvas>\n\n        <Loader\n          containerStyles={{\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n          }}\n          barStyles={{\n            background: 'linear-gradient(90deg, #f093fb 0%, #f5576c 100%)'\n          }}\n          dataStyles={{ color: 'white', fontSize: '1.2rem' }}\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App","import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.tsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n"],"names":["InputManager","canvas","state","previousState","callbacks","Map","constructor","this","keys","Set","mouse","x","y","buttons","wheel","touch","touches","isActive","cloneState","setupEventListeners","window","addEventListener","handleKeyDown","bind","handleKeyUp","handleMouseDown","handleMouseUp","handleMouseMove","handleWheel","handleTouchStart","passive","handleTouchEnd","handleTouchMove","e","preventDefault","tabIndex","event","add","code","triggerCallback","includes","delete","button","updateMousePosition","focus","deltaY","rect","getBoundingClientRect","clientX","left","clientY","top","Array","from","length","isKeyPressed","key","has","isKeyJustPressed","isKeyJustReleased","isMouseButtonPressed","isMouseButtonJustPressed","isMouseButtonJustReleased","getMousePosition","getMouseWheel","getTouches","isTouchActive","on","callback","set","get","off","data","forEach","update","getMovementInput","Math","sqrt","getActionInputs","interact","menu","inventory","skills","confirm","cancel","destroy","removeEventListener","clear","AudioManager","audioSources","settings","audioContext","gainNodes","masterVolume","musicVolume","sfxVolume","muted","loadSettingsFromStorage","initializeAudioContext","AudioContext","webkitAudioContext","masterGain","createGain","musicGain","sfxGain","connect","destination","updateGainNodes","error","console","warn","gain","value","loadAudio","src","category","loop","Promise","resolve","reject","audio","Audio","source","volume","preload","play","fadeIn","fadeDuration","pause","currentTime","currentFade","calculateEffectiveVolume","playPromise","catch","stop","fadeOut","resume","paused","isPlaying","setVolume","max","min","updateAllAudioVolumes","saveSettingsToStorage","getVolume","toggleMute","isMuted","categoryVolume","deltaTime","progress","preloadGameAudio","loadPromises","map","all","playClick","playSuccess","playError","playLevelUp","playAchievement","playBackgroundMusic","playMenuMusic","stored","localStorage","getItem","JSON","parse","setItem","stringify","close","Player","stats","equipment","position","achievements","unlockedContent","level","experience","experienceToNext","reputation","energy","maxEnergy","money","technicalMapping","artisticVision","equipmentMastery","socialMedia","collaboration","projector","computer","controller","software","accessories","scene","getStats","addExperience","amount","levelUp","floor","pow","addReputation","onLevelUp","log","addMoney","spendMoney","consumeEnergy","restoreEnergy","getSkills","getSkillLevel","skill","upgradeSkill","cost","onSkillUpgrade","checkSkillUnlocks","getEquipment","equipItem","slot","itemId","hasInInventory","currentItem","addToInventory","removeFromInventory","onEquipmentChange","unequipItem","addSoftware","softwareId","push","addAccessory","accessoryId","getInventory","quantity","current","getInventoryCount","getPosition","setPosition","moveBy","dx","dy","getAchievements","unlockAchievement","achievementId","onAchievementUnlocked","hasAchievement","getUnlockedContent","hasUnlockedContent","contentId","unlockContent","getEffectiveStats","baseStats","bonuses","calculateEquipmentBonuses","serialize","entries","deserialize","parsed","SkillSystem","static","skillDefinitions","skillTree","initializeSkillDefinitions","initializeSkillTree","getInstance","instance","id","name","description","icon","maxLevel","baseCost","costMultiplier","unlocks","content","prerequisites","connections","getSkillDefinition","getAllSkillDefinitions","values","getSkillTree","canUpgradeSkill","player","definition","canUpgrade","reason","currentLevel","prereq","getUpgradeCost","onSkillUpgraded","newLevel","unlock","find","u","triggerUnlockNotification","skillName","getRecommendedSkills","recommendations","averageLevel","Object","reduce","sum","skillKey","getSkillSynergies","synergies","techArtSynergy","equipTechSynergy","socialCollabSynergy","minSkill","maxSkill","getSkillProgress","percentage","checkSkillAchievements","newAchievements","milestone","synergyName","toLowerCase","replace","EquipmentSystem","equipmentDatabase","upgradeDatabase","initializeEquipmentDatabase","initializeUpgradeDatabase","type","rarity","processing","memory","graphics","requirements","effects","brightness","resolution","colorAccuracy","responsiveness","features","stability","inputSources","audioQuality","item","statBoosts","getEquipmentItem","getAllEquipment","getEquipmentByType","filter","getAvailableEquipment","playerSkills","playerStats","req","canAffordEquipment","equipmentId","purchaseEquipment","some","eq","getUpgrades","canUpgradeEquipment","upgradeId","upgrade","upgradeEquipment","upgradedId","compareEquipment","item1Id","item2Id","item1","item2","comparison","stat","stat1","stat2","getRecommendedEquipment","available","currentEquipment","currentInSlot","sort","a","b","scoreA","scoreB","slice","getEquipmentSynergies","hasHighEndComputer","hasHighEndProjector","hasController","getMarketPrices","prices","baseFactor","random","trend","AchievementSystem","playerProgress","initializeAchievements","points","customCheck","rewards","unlockId","every","size","hasProProjector","hasWorkstation","hidden","achievement","getAchievement","getAllAchievements","getVisibleAchievements","getAchievementsByCategory","checkAchievements","newUnlocks","maxProgress","completed","reqResult","checkRequirement","unlockedAt","Date","grantAchievementRewards","requirement","totalItems","count","reward","getAchievementProgress","getAllProgress","getCompletedAchievements","p","getInProgressAchievements","getAchievementStats","totalAchievements","unlockedAchievements","total","unlocked","totalPoints","earnedPoints","completionPercentage","getRecentAchievements","limit","triggerSecretAchievement","secretId","getNearCompletionAchievements","threshold","progressA","progressB","ratioA","create","subscribeWithSelector","skillSystem","equipmentSystem","achievementSystem","autoSaveEnabled","lastSaveTime","saveSlots","fill","sessionStartTime","now","totalPlaytime","initializePlayer","autoSave","refreshPlayerData","startSession","setInterval","saveGame","result","gameStore","getState","addNotification","title","message","duration","async","slotId","updatePlaytime","saveData","playerData","timestamp","playerLevel","location","playtime","saveKey","loadGame","Error","deleteSave","removeItem","getSaveSlots","slots","i","setAutoSave","enabled","sessionDuration","getSessionDuration","resetPlayer","newPlayer","exportPlayerData","exportData","exportedAt","version","importPlayerData","SceneManager","gameEngine","currentScene","nextScene","isTransitioning","transitionDuration","transitionTime","loadScene","startTransition","getCurrentScene","onExit","completeTransition","onEnter","render","ctx","renderTransition","alpha","sin","PI","globalAlpha","renderTransitionOverlay","centerX","width","centerY","height","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","sceneStack","pushScene","onPause","popScene","pop","onResume","isTransitionInProgress","getTransitionProgress","GameEngine","sceneManager","inputManager","audioManager","lastFrameTime","isRunning","frameId","getContext","setupCanvas","dpr","devicePixelRatio","style","scale","handleResize","start","performance","gameLoop","cancelAnimationFrame","requestAnimationFrame","clearRect","getSceneManager","getInputManager","getAudioManager","getCanvas","useGameStore","setPaused","isPaused","isInitialized","showHUD","showMenu","showInventory","showSkillTree","showAchievements","showSettings","currentDialog","notifications","loading","isLoading","loadingText","vjCareerGame","quality","showParticles","showAnimations","controls","keyboardControls","moveUp","moveDown","moveLeft","moveRight","mouseControls","touchControls","accessibility","colorBlindMode","highContrast","reducedMotion","textSize","initializeGame","loadSettings","setTimeout","toString","startGame","pauseGame","resumeGame","stopGame","setCurrentScene","sceneName","toggleHUD","showMenuModal","hideMenuModal","showInventoryModal","hideInventoryModal","showSkillTreeModal","hideSkillTreeModal","showAchievementsModal","hideAchievementsModal","showSettingsModal","hideSettingsModal","showDialog","character","text","options","hideDialog","notification","removeNotification","n","clearNotifications","setLoading","startNewGame","venue","isPerforming","newExperience","setVenue","setPerforming","performing","updateGraphicsSettings","newSettings","saveSettings","updateAudioSettings","updateControlSettings","updateAccessibilitySettings","MetatronsCube","color","emissiveIntensity","groupRef","useRef","linesRef","spherePositions","useMemo","positions","angle","cos","lines","lineGeometry","THREE.BufferGeometry","j","setAttribute","THREE.Float32BufferAttribute","useFrame","rotation","clock","elapsedTime","z","jsxs","ref","children","pos","jsx","args","metalness","roughness","emissive","geometry","transparent","opacity","linewidth","FlowerOfLife","circles","circlePositions","Merkaba","innerRef","side","THREE.DoubleSide","SacredGeometryComposite","Venue3D","difficulty","onSelect","meshRef","colors","Float","speed","rotationIntensity","floatIntensity","Box","onClick","Text","fontSize","anchorX","Equipment3D","VJCareerGame3D","gameActive","selectedVenue","setSelectedVenue","useState","currentPerformance","setCurrentPerformance","setIsLoading","venues","xp","Fragment","handleVenueSelect","power","toUpperCase","Sparkles","MainScene","intensity","penumbra","castShadow","Environment","preset","Stars","radius","depth","factor","saturation","fade","ScrollControls","pages","damping","Scroll","_","Sphere","MeshDistortMaterial","THREE.Color","setHSL","distort","project","clearcoat","html","pointerEvents","display","alignItems","justifyContent","motion","div","initial","animate","transition","ease","textAlign","fontWeight","background","backgroundSize","WebkitBackgroundClip","WebkitTextFillColor","animation","marginBottom","textShadow","letterSpacing","marginTop","padding","borderRadius","border","ContactShadows","blur","App","Canvas","shadows","camera","fov","Suspense","fallback","Loader","containerStyles","barStyles","dataStyles","createRoot","document","getElementById","StrictMode"],"mappings":"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"}